
Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000030a  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006e4  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f2  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000173  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000456  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fd  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e0       	ldi	r30, 0x0A	; 10
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a0 30       	cpi	r26, 0x00	; 0
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 96 00 	call	0x12c	; 0x12c <main>
 124:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <main>:

int main(void)
{
	uint8_t x = 1;
	
	DDRA = 0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
 130:	12 b8       	out	0x02, r1	; 2
	
	TCCR1A = (1 << WGM10)|(1 << COM1A1)|(1 << COM1B1)|(1 << COM1C1);
 132:	99 ea       	ldi	r25, 0xA9	; 169
 134:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << CS11)|(1 << WGM12);
 138:	9a e0       	ldi	r25, 0x0A	; 10
 13a:	90 93 81 00 	sts	0x0081, r25
	OCR1A = 0;
 13e:	10 92 89 00 	sts	0x0089, r1
 142:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 146:	10 92 8b 00 	sts	0x008B, r1
 14a:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
 14e:	10 92 8d 00 	sts	0x008D, r1
 152:	10 92 8c 00 	sts	0x008C, r1
	DDRB = 0xFF;
 156:	84 b9       	out	0x04, r24	; 4
    while(1)
    {
		for(uint8_t i = 0; i < 127; i ++)
 158:	40 e0       	ldi	r20, 0x00	; 0
        {OCR1A =  OCR1A+2;
 15a:	e8 e8       	ldi	r30, 0x88	; 136
 15c:	f0 e0       	ldi	r31, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f e7       	ldi	r18, 0x7F	; 127
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1B =  OCR1B+2;
 160:	aa e8       	ldi	r26, 0x8A	; 138
 162:	b0 e0       	ldi	r27, 0x00	; 0
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1A =  OCR1A-2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1C =  OCR1C+2;
 164:	cc e8       	ldi	r28, 0x8C	; 140
 166:	d0 e0       	ldi	r29, 0x00	; 0
	OCR1B = 0;
	OCR1C = 0;
	DDRB = 0xFF;
    while(1)
    {
		for(uint8_t i = 0; i < 127; i ++)
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	0f c0       	rjmp	.+30     	; 0x18a <main+0x5e>
        {OCR1A =  OCR1A+2;
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	02 96       	adiw	r24, 0x02	; 2
 172:	91 83       	std	Z+1, r25	; 0x01
 174:	80 83       	st	Z, r24
 176:	6f ef       	ldi	r22, 0xFF	; 255
 178:	70 e7       	ldi	r23, 0x70	; 112
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	61 50       	subi	r22, 0x01	; 1
 17e:	70 40       	sbci	r23, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x50>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x5a>
 186:	00 00       	nop
	OCR1B = 0;
	OCR1C = 0;
	DDRB = 0xFF;
    while(1)
    {
		for(uint8_t i = 0; i < 127; i ++)
 188:	4f 5f       	subi	r20, 0xFF	; 255
 18a:	4f 37       	cpi	r20, 0x7F	; 127
 18c:	78 f3       	brcs	.-34     	; 0x16c <main+0x40>
 18e:	4f ef       	ldi	r20, 0xFF	; 255
 190:	53 ed       	ldi	r21, 0xD3	; 211
 192:	60 e3       	ldi	r22, 0x30	; 48
 194:	41 50       	subi	r20, 0x01	; 1
 196:	50 40       	sbci	r21, 0x00	; 0
 198:	60 40       	sbci	r22, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x68>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x72>
 19e:	00 00       	nop
 1a0:	42 2f       	mov	r20, r18
        {OCR1A =  OCR1A+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1B =  OCR1B+2;
 1a2:	8d 91       	ld	r24, X+
 1a4:	9c 91       	ld	r25, X
 1a6:	11 97       	sbiw	r26, 0x01	; 1
 1a8:	02 96       	adiw	r24, 0x02	; 2
 1aa:	11 96       	adiw	r26, 0x01	; 1
 1ac:	9c 93       	st	X, r25
 1ae:	8e 93       	st	-X, r24
 1b0:	6f ef       	ldi	r22, 0xFF	; 255
 1b2:	70 e7       	ldi	r23, 0x70	; 112
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	61 50       	subi	r22, 0x01	; 1
 1b8:	70 40       	sbci	r23, 0x00	; 0
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x8a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x94>
 1c0:	00 00       	nop
 1c2:	41 50       	subi	r20, 0x01	; 1
    {
		for(uint8_t i = 0; i < 127; i ++)
        {OCR1A =  OCR1A+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
 1c4:	71 f7       	brne	.-36     	; 0x1a2 <main+0x76>
 1c6:	4f ef       	ldi	r20, 0xFF	; 255
 1c8:	53 ed       	ldi	r21, 0xD3	; 211
 1ca:	60 e3       	ldi	r22, 0x30	; 48
 1cc:	41 50       	subi	r20, 0x01	; 1
 1ce:	50 40       	sbci	r21, 0x00	; 0
 1d0:	60 40       	sbci	r22, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0xa0>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0xaa>
 1d6:	00 00       	nop
 1d8:	42 2f       	mov	r20, r18
		{OCR1B =  OCR1B+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1A =  OCR1A-2;
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	02 97       	sbiw	r24, 0x02	; 2
 1e0:	91 83       	std	Z+1, r25	; 0x01
 1e2:	80 83       	st	Z, r24
 1e4:	6f ef       	ldi	r22, 0xFF	; 255
 1e6:	70 e7       	ldi	r23, 0x70	; 112
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	61 50       	subi	r22, 0x01	; 1
 1ec:	70 40       	sbci	r23, 0x00	; 0
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0xbe>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0xc8>
 1f4:	00 00       	nop
 1f6:	41 50       	subi	r20, 0x01	; 1
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1B =  OCR1B+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
 1f8:	81 f7       	brne	.-32     	; 0x1da <main+0xae>
 1fa:	4f ef       	ldi	r20, 0xFF	; 255
 1fc:	53 ed       	ldi	r21, 0xD3	; 211
 1fe:	60 e3       	ldi	r22, 0x30	; 48
 200:	41 50       	subi	r20, 0x01	; 1
 202:	50 40       	sbci	r21, 0x00	; 0
 204:	60 40       	sbci	r22, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0xd4>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0xde>
 20a:	00 00       	nop
 20c:	42 2f       	mov	r20, r18
		{OCR1A =  OCR1A-2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1C =  OCR1C+2;
 20e:	88 81       	ld	r24, Y
 210:	99 81       	ldd	r25, Y+1	; 0x01
 212:	02 96       	adiw	r24, 0x02	; 2
 214:	99 83       	std	Y+1, r25	; 0x01
 216:	88 83       	st	Y, r24
 218:	6f ef       	ldi	r22, 0xFF	; 255
 21a:	70 e7       	ldi	r23, 0x70	; 112
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	61 50       	subi	r22, 0x01	; 1
 220:	70 40       	sbci	r23, 0x00	; 0
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0xf2>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0xfc>
 228:	00 00       	nop
 22a:	41 50       	subi	r20, 0x01	; 1
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1A =  OCR1A-2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
 22c:	81 f7       	brne	.-32     	; 0x20e <main+0xe2>
 22e:	4f ef       	ldi	r20, 0xFF	; 255
 230:	53 ed       	ldi	r21, 0xD3	; 211
 232:	60 e3       	ldi	r22, 0x30	; 48
 234:	41 50       	subi	r20, 0x01	; 1
 236:	50 40       	sbci	r21, 0x00	; 0
 238:	60 40       	sbci	r22, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x108>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x112>
 23e:	00 00       	nop
 240:	42 2f       	mov	r20, r18
		{OCR1C =  OCR1C+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1B =  OCR1B-2;
 242:	8d 91       	ld	r24, X+
 244:	9c 91       	ld	r25, X
 246:	11 97       	sbiw	r26, 0x01	; 1
 248:	02 97       	sbiw	r24, 0x02	; 2
 24a:	11 96       	adiw	r26, 0x01	; 1
 24c:	9c 93       	st	X, r25
 24e:	8e 93       	st	-X, r24
 250:	6f ef       	ldi	r22, 0xFF	; 255
 252:	70 e7       	ldi	r23, 0x70	; 112
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	61 50       	subi	r22, 0x01	; 1
 258:	70 40       	sbci	r23, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x12a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x134>
 260:	00 00       	nop
 262:	41 50       	subi	r20, 0x01	; 1
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1C =  OCR1C+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
 264:	71 f7       	brne	.-36     	; 0x242 <main+0x116>
 266:	4f ef       	ldi	r20, 0xFF	; 255
 268:	53 ed       	ldi	r21, 0xD3	; 211
 26a:	60 e3       	ldi	r22, 0x30	; 48
 26c:	41 50       	subi	r20, 0x01	; 1
 26e:	50 40       	sbci	r21, 0x00	; 0
 270:	60 40       	sbci	r22, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x140>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x14a>
 276:	00 00       	nop
 278:	42 2f       	mov	r20, r18
		{OCR1B =  OCR1B-2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1A =  OCR1A+2;
 27a:	80 81       	ld	r24, Z
 27c:	91 81       	ldd	r25, Z+1	; 0x01
 27e:	02 96       	adiw	r24, 0x02	; 2
 280:	91 83       	std	Z+1, r25	; 0x01
 282:	80 83       	st	Z, r24
 284:	6f ef       	ldi	r22, 0xFF	; 255
 286:	70 e7       	ldi	r23, 0x70	; 112
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	61 50       	subi	r22, 0x01	; 1
 28c:	70 40       	sbci	r23, 0x00	; 0
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x15e>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x168>
 294:	00 00       	nop
 296:	41 50       	subi	r20, 0x01	; 1
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1B =  OCR1B-2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
 298:	81 f7       	brne	.-32     	; 0x27a <main+0x14e>
 29a:	4f ef       	ldi	r20, 0xFF	; 255
 29c:	53 ed       	ldi	r21, 0xD3	; 211
 29e:	60 e3       	ldi	r22, 0x30	; 48
 2a0:	41 50       	subi	r20, 0x01	; 1
 2a2:	50 40       	sbci	r21, 0x00	; 0
 2a4:	60 40       	sbci	r22, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x174>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x17e>
 2aa:	00 00       	nop
 2ac:	42 2f       	mov	r20, r18
		{OCR1A =  OCR1A+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1C =  OCR1C-2;
 2ae:	88 81       	ld	r24, Y
 2b0:	99 81       	ldd	r25, Y+1	; 0x01
 2b2:	02 97       	sbiw	r24, 0x02	; 2
 2b4:	99 83       	std	Y+1, r25	; 0x01
 2b6:	88 83       	st	Y, r24
 2b8:	6f ef       	ldi	r22, 0xFF	; 255
 2ba:	70 e7       	ldi	r23, 0x70	; 112
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	61 50       	subi	r22, 0x01	; 1
 2c0:	70 40       	sbci	r23, 0x00	; 0
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x192>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x19c>
 2c8:	00 00       	nop
 2ca:	41 50       	subi	r20, 0x01	; 1
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1A =  OCR1A+2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
 2cc:	81 f7       	brne	.-32     	; 0x2ae <main+0x182>
 2ce:	4f ef       	ldi	r20, 0xFF	; 255
 2d0:	53 ed       	ldi	r21, 0xD3	; 211
 2d2:	60 e3       	ldi	r22, 0x30	; 48
 2d4:	41 50       	subi	r20, 0x01	; 1
 2d6:	50 40       	sbci	r21, 0x00	; 0
 2d8:	60 40       	sbci	r22, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x1a8>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x1b2>
 2de:	00 00       	nop
 2e0:	42 2f       	mov	r20, r18
		{OCR1C =  OCR1C-2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1A =  OCR1A-2;
 2e2:	80 81       	ld	r24, Z
 2e4:	91 81       	ldd	r25, Z+1	; 0x01
 2e6:	02 97       	sbiw	r24, 0x02	; 2
 2e8:	91 83       	std	Z+1, r25	; 0x01
 2ea:	80 83       	st	Z, r24
 2ec:	6f ef       	ldi	r22, 0xFF	; 255
 2ee:	71 ee       	ldi	r23, 0xE1	; 225
 2f0:	84 e0       	ldi	r24, 0x04	; 4
 2f2:	61 50       	subi	r22, 0x01	; 1
 2f4:	70 40       	sbci	r23, 0x00	; 0
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x1c6>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x1d0>
 2fc:	00 00       	nop
 2fe:	41 50       	subi	r20, 0x01	; 1
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
		{OCR1C =  OCR1C-2;
		_delay_ms(50);}
		_delay_ms(1000);
		for(uint8_t i = 0; i < 127; i ++)
 300:	81 f7       	brne	.-32     	; 0x2e2 <main+0x1b6>
	OCR1B = 0;
	OCR1C = 0;
	DDRB = 0xFF;
    while(1)
    {
		for(uint8_t i = 0; i < 127; i ++)
 302:	43 2f       	mov	r20, r19
 304:	42 cf       	rjmp	.-380    	; 0x18a <main+0x5e>

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
