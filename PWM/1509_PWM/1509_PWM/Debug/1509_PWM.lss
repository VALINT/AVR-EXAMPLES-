
1509_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000206  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012f  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000141  00000000  00000000  00000501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c8  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ee       	ldi	r30, 0xE2	; 226
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	10 d0       	rcall	.+32     	; 0x7a <main>
  5a:	41 c0       	rjmp	.+130    	; 0xde <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z8PWM_Initv>:
double p,x = 0;


void PWM_Init(void)													//Функція ініціалізації трьох ШІМ каналів
{
	TCCR1A = (1 << WGM10)|(1 << COM1A1)|(1 << COM1B1);				//
  5e:	81 ea       	ldi	r24, 0xA1	; 161
  60:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << CS11)|(1 << WGM12);								//Налаштовую Fast PWM 8bit для двох каналів таймера 1
  62:	8a e0       	ldi	r24, 0x0A	; 10
  64:	8e bd       	out	0x2e, r24	; 46
	TCCR2 = (1 << WGM20)|(1 << WGM21)|(1 << CS20)|(1 << COM21);					//Налаштовую Fast PWM 8bit для таймера 2
  66:	89 e6       	ldi	r24, 0x69	; 105
  68:	85 bd       	out	0x25, r24	; 37
	OCR1A = 0;														//Початкове значення довжини імпульсу для А каналу таймера 1
  6a:	1b bc       	out	0x2b, r1	; 43
  6c:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;														//Початкове значення довжини імпульсу для Б каналу таймера 1
  6e:	19 bc       	out	0x29, r1	; 41
  70:	18 bc       	out	0x28, r1	; 40
	OCR2 = 0;														//Початкове значення довжини імпульсу для таймера 2
  72:	13 bc       	out	0x23, r1	; 35
	DDRB = 0xff;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	87 bb       	out	0x17, r24	; 23
  78:	08 95       	ret

0000007a <main>:
}

int main(void)
{
	PWM_Init();
  7a:	f1 df       	rcall	.-30     	; 0x5e <_Z8PWM_Initv>
	DDRD = 0x00;
  7c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
  7e:	12 ba       	out	0x12, r1	; 18
	
	
	while (1)
	{
		if (PIND & (1 << PD0))
  80:	80 9b       	sbis	0x10, 0	; 16
  82:	0e c0       	rjmp	.+28     	; 0xa0 <main+0x26>
		{
			OCR1A = OCR1A + 5;
  84:	8a b5       	in	r24, 0x2a	; 42
  86:	9b b5       	in	r25, 0x2b	; 43
  88:	05 96       	adiw	r24, 0x05	; 5
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	81 ee       	ldi	r24, 0xE1	; 225
  92:	94 e0       	ldi	r25, 0x04	; 4
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x1a>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x24>
  9e:	00 00       	nop
			_delay_ms(200);
		}
		if (PIND & (1 << PD1))
  a0:	81 9b       	sbis	0x10, 1	; 16
  a2:	0e c0       	rjmp	.+28     	; 0xc0 <main+0x46>
		{
			OCR1A = OCR1A - 5;
  a4:	8a b5       	in	r24, 0x2a	; 42
  a6:	9b b5       	in	r25, 0x2b	; 43
  a8:	05 97       	sbiw	r24, 0x05	; 5
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	81 ee       	ldi	r24, 0xE1	; 225
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x3a>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x44>
  be:	00 00       	nop
			_delay_ms(200);
		}						
		if ( PIND & (1 << PD2))
  c0:	82 9b       	sbis	0x10, 2	; 16
  c2:	de cf       	rjmp	.-68     	; 0x80 <main+0x6>
		{
			OCR2 = OCR2 + 5;
  c4:	83 b5       	in	r24, 0x23	; 35
  c6:	8b 5f       	subi	r24, 0xFB	; 251
  c8:	83 bd       	out	0x23, r24	; 35
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	81 ee       	ldi	r24, 0xE1	; 225
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x56>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x60>
  da:	00 00       	nop
  dc:	d1 cf       	rjmp	.-94     	; 0x80 <main+0x6>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
