
Buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ac  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000878  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003d5  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000115  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010b  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000037  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ea       	ldi	r30, 0xAC	; 172
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	26 c0       	rjmp	.+76     	; 0xa8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
int main(void)
{
	uint8_t counter = 1;
	
	//Set port D to output
	DDRD = 0xff;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  62:	12 ba       	out	0x12, r1	; 18
	
	//Set port C to input
	DDRC = 0x00;
  64:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
  66:	12 ba       	out	0x12, r1	; 18
#include <util/delay.h>
#include <stdint.h>

int main(void)
{
	uint8_t counter = 1;
  68:	81 e0       	ldi	r24, 0x01	; 1
	PORTD = 0x00;
	
    while(1)
    {
		if(PINC &(1 << PC0))
			if(counter == 128) counter = 1;
  6a:	91 e0       	ldi	r25, 0x01	; 1
			else counter <<= 1;
		
		if(PINC &(1 << PC1))
			if(counter == 1) counter = 128;
  6c:	20 e8       	ldi	r18, 0x80	; 128
	DDRC = 0x00;
	PORTD = 0x00;
	
    while(1)
    {
		if(PINC &(1 << PC0))
  6e:	98 9b       	sbis	0x13, 0	; 19
  70:	05 c0       	rjmp	.+10     	; 0x7c <main+0x1e>
			if(counter == 128) counter = 1;
  72:	80 38       	cpi	r24, 0x80	; 128
  74:	11 f0       	breq	.+4      	; 0x7a <main+0x1c>
			else counter <<= 1;
  76:	88 0f       	add	r24, r24
  78:	01 c0       	rjmp	.+2      	; 0x7c <main+0x1e>
	PORTD = 0x00;
	
    while(1)
    {
		if(PINC &(1 << PC0))
			if(counter == 128) counter = 1;
  7a:	89 2f       	mov	r24, r25
			else counter <<= 1;
		
		if(PINC &(1 << PC1))
  7c:	99 9b       	sbis	0x13, 1	; 19
  7e:	03 c0       	rjmp	.+6      	; 0x86 <main+0x28>
			if(counter == 1) counter = 128;
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	21 f0       	breq	.+8      	; 0x8c <main+0x2e>
			else counter >>= 1;
  84:	86 95       	lsr	r24
		
		(counter == 0) ? counter = 1:counter = counter; 
  86:	88 23       	and	r24, r24
  88:	19 f0       	breq	.+6      	; 0x90 <main+0x32>
  8a:	03 c0       	rjmp	.+6      	; 0x92 <main+0x34>
		if(PINC &(1 << PC0))
			if(counter == 128) counter = 1;
			else counter <<= 1;
		
		if(PINC &(1 << PC1))
			if(counter == 1) counter = 128;
  8c:	82 2f       	mov	r24, r18
  8e:	01 c0       	rjmp	.+2      	; 0x92 <main+0x34>
			else counter >>= 1;
		
		(counter == 0) ? counter = 1:counter = counter; 
  90:	89 2f       	mov	r24, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	4f ef       	ldi	r20, 0xFF	; 255
  94:	52 e5       	ldi	r21, 0x52	; 82
  96:	67 e0       	ldi	r22, 0x07	; 7
  98:	41 50       	subi	r20, 0x01	; 1
  9a:	50 40       	sbci	r21, 0x00	; 0
  9c:	60 40       	sbci	r22, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x3a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x44>
  a2:	00 00       	nop
		_delay_ms(300);
		
		PORTD = counter;
  a4:	82 bb       	out	0x12, r24	; 18
	
	//Set port C to input
	DDRC = 0x00;
	PORTD = 0x00;
	
    while(1)
  a6:	e3 cf       	rjmp	.-58     	; 0x6e <main+0x10>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
