
1511_SPI_Slave_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f7  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c2  00000000  00000000  0000026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000007f  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000005fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	1e c0       	rjmp	.+60     	; 0x52 <__vector_10>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	15 d0       	rcall	.+42     	; 0x6e <main>
  44:	19 c0       	rjmp	.+50     	; 0x78 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z13initial_Slavev>:
	return;
}

void initial_Slave(void)
{
	DDRB = 0x00;
  48:	17 ba       	out	0x17, r1	; 23
	SPCR = (1<<SPE)|(1<<SPIE);
  4a:	80 ec       	ldi	r24, 0xC0	; 192
  4c:	8d b9       	out	0x0d, r24	; 13
	sei();
  4e:	78 94       	sei
  50:	08 95       	ret

00000052 <__vector_10>:
	return;
}

ISR(SPI_STC_vect)
{
  52:	1f 92       	push	r1
  54:	0f 92       	push	r0
  56:	0f b6       	in	r0, 0x3f	; 63
  58:	0f 92       	push	r0
  5a:	11 24       	eor	r1, r1
  5c:	8f 93       	push	r24
	PORTD = SPDR;
  5e:	8f b1       	in	r24, 0x0f	; 15
  60:	82 bb       	out	0x12, r24	; 18
}
  62:	8f 91       	pop	r24
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

0000006e <main>:
void initial(void);
void initial_Slave(void);

void initial(void)
{
	DDRD = 0xff;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17


int main(void)
{
	initial();
	initial_Slave();
  72:	ea df       	rcall	.-44     	; 0x48 <_Z13initial_Slavev>
	
    while (1) 
    {
		asm("nop");
  74:	00 00       	nop
{
	PORTD = SPDR;
}


int main(void)
  76:	fe cf       	rjmp	.-4      	; 0x74 <main+0x6>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
