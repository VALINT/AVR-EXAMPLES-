
1709_Pr_VENUS(VU-Meter).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000606  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800064  00800064  0000069e  2**0
                  ALLOC
  3 .stab         00001404  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004be  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f5  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f7  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d3  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000230  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000427  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003517  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6c c0       	rjmp	.+216    	; 0xda <__ctors_end>
   2:	86 c0       	rjmp	.+268    	; 0x110 <__bad_interrupt>
   4:	85 c0       	rjmp	.+266    	; 0x110 <__bad_interrupt>
   6:	84 c0       	rjmp	.+264    	; 0x110 <__bad_interrupt>
   8:	83 c0       	rjmp	.+262    	; 0x110 <__bad_interrupt>
   a:	82 c0       	rjmp	.+260    	; 0x110 <__bad_interrupt>
   c:	81 c0       	rjmp	.+258    	; 0x110 <__bad_interrupt>
   e:	80 c0       	rjmp	.+256    	; 0x110 <__bad_interrupt>
  10:	7f c0       	rjmp	.+254    	; 0x110 <__bad_interrupt>
  12:	9e c1       	rjmp	.+828    	; 0x350 <__vector_9>
  14:	7d c0       	rjmp	.+250    	; 0x110 <__bad_interrupt>
  16:	7c c0       	rjmp	.+248    	; 0x110 <__bad_interrupt>
  18:	7b c0       	rjmp	.+246    	; 0x110 <__bad_interrupt>
  1a:	7a c0       	rjmp	.+244    	; 0x110 <__bad_interrupt>
  1c:	79 c0       	rjmp	.+242    	; 0x110 <__bad_interrupt>
  1e:	78 c0       	rjmp	.+240    	; 0x110 <__bad_interrupt>
  20:	77 c0       	rjmp	.+238    	; 0x110 <__bad_interrupt>
  22:	76 c0       	rjmp	.+236    	; 0x110 <__bad_interrupt>
  24:	75 c0       	rjmp	.+234    	; 0x110 <__bad_interrupt>

00000026 <LineScale>:
  26:	4d 00 91 00 cc 00 18 01 5c 01 99 01 e3 01 26 02     M.......\.....&.
  36:	65 02 aa 02 f0 02 33 03 7a 03 bd 03 ff 03           e.....3.z.....

00000044 <LogScale>:
  44:	0a 00 33 00 66 00 a3 00 e1 00 1e 01 44 01 6b 01     ..3.f.......D.k.
  54:	99 01 c9 01 00 02 3c 02 84 02 db 02 ff 03           ......<.......

00000062 <LinDivArr>:
  62:	00 00 80 3f c3 f5 88 3f 33 33 93 3f 00 00 a0 3f     ...?...?33.?...?
  72:	7b 14 ae 3f 00 00 c0 3f 8f c2 d5 3f 7b 14 ee 3f     {..?...?...?{..?
  82:	14 ae 07 40 00 00 20 40 f6 28 3c 40 9a 99 69 40     ...@.. @.(<@..i@
  92:	00 00 a0 40 ae 47 e1 40 5c 8f 52 41                 ...@.G.@\.RA

0000009e <LogDivArr>:
  9e:	00 00 80 3f 33 33 b3 3f 1f 85 cb 3f b8 1e e5 3f     ...?33.?...?...?
  ae:	00 00 00 40 29 5c 0f 40 00 00 20 40 e1 7a 34 40     ...@)\.@.. @.z4@
  be:	71 3d 4a 40 e1 7a 64 40 9a 99 91 40 00 00 c8 40     q=J@.zd@...@...@
  ce:	00 00 20 41 00 00 a0 41 00 00 c8 42                 .. A...A...B

000000da <__ctors_end>:
  da:	11 24       	eor	r1, r1
  dc:	1f be       	out	0x3f, r1	; 63
  de:	cf e5       	ldi	r28, 0x5F	; 95
  e0:	d4 e0       	ldi	r29, 0x04	; 4
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	a0 e6       	ldi	r26, 0x60	; 96
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e6 e0       	ldi	r30, 0x06	; 6
  ee:	f6 e0       	ldi	r31, 0x06	; 6
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
  f2:	05 90       	lpm	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	a4 36       	cpi	r26, 0x64	; 100
  f8:	b1 07       	cpc	r27, r17
  fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	a4 e6       	ldi	r26, 0x64	; 100
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
 104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
 106:	ad 39       	cpi	r26, 0x9D	; 157
 108:	b1 07       	cpc	r27, r17
 10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
 10c:	7e d0       	rcall	.+252    	; 0x20a <main>
 10e:	79 c2       	rjmp	.+1266   	; 0x602 <_exit>

00000110 <__bad_interrupt>:
 110:	77 cf       	rjmp	.-274    	; 0x0 <__vectors>

00000112 <BuildScale>:
		LeftBar = BuildBar((ADCLBuf), BAR);
		ADCSRA |= (1 << ADSC);	
}

void BuildScale(uint8_t Type)
{
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	bf 92       	push	r11
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	b8 2e       	mov	r11, r24
		if(Type == LOG)
		{buffer = pgm_read_float_near(&(LogDivArr[i]));}
		if(Type == LINE)
		{buffer = pgm_read_float_near(&(LinDivArr[i]));}
		
		Scale[i] = Vmax/buffer;
 132:	40 90 60 00 	lds	r4, 0x0060
 136:	50 90 61 00 	lds	r5, 0x0061
 13a:	60 90 62 00 	lds	r6, 0x0062
 13e:	70 90 63 00 	lds	r7, 0x0063
 142:	0f 2e       	mov	r0, r31
 144:	ff e7       	ldi	r31, 0x7F	; 127
 146:	8f 2e       	mov	r8, r31
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	9f 2e       	mov	r9, r31
 14c:	f0 2d       	mov	r31, r0
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
void BuildScale(uint8_t Type)
{
	float buffer;
	for(uint8_t i = 0; i < 15; i++)
	{
		if(Type == LOG)
 152:	bb 20       	and	r11, r11
 154:	81 f4       	brne	.+32     	; 0x176 <BuildScale+0x64>
		{buffer = pgm_read_float_near(&(LogDivArr[i]));}
 156:	fe 01       	movw	r30, r28
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e2 56       	subi	r30, 0x62	; 98
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	85 91       	lpm	r24, Z+
 166:	95 91       	lpm	r25, Z+
 168:	a5 91       	lpm	r26, Z+
 16a:	b4 91       	lpm	r27, Z
 16c:	c8 2e       	mov	r12, r24
 16e:	d9 2e       	mov	r13, r25
 170:	ea 2e       	mov	r14, r26
 172:	fb 2e       	mov	r15, r27
 174:	12 c0       	rjmp	.+36     	; 0x19a <BuildScale+0x88>
		if(Type == LINE)
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	b8 16       	cp	r11, r24
 17a:	79 f4       	brne	.+30     	; 0x19a <BuildScale+0x88>
		{buffer = pgm_read_float_near(&(LinDivArr[i]));}
 17c:	fe 01       	movw	r30, r28
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	ee 59       	subi	r30, 0x9E	; 158
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	85 91       	lpm	r24, Z+
 18c:	95 91       	lpm	r25, Z+
 18e:	a5 91       	lpm	r26, Z+
 190:	b4 91       	lpm	r27, Z
 192:	c8 2e       	mov	r12, r24
 194:	d9 2e       	mov	r13, r25
 196:	ea 2e       	mov	r14, r26
 198:	fb 2e       	mov	r15, r27
		
		Scale[i] = Vmax/buffer;
 19a:	c3 01       	movw	r24, r6
 19c:	b2 01       	movw	r22, r4
 19e:	0c 2d       	mov	r16, r12
 1a0:	1d 2d       	mov	r17, r13
 1a2:	2e 2d       	mov	r18, r14
 1a4:	3f 2d       	mov	r19, r15
 1a6:	a9 01       	movw	r20, r18
 1a8:	98 01       	movw	r18, r16
 1aa:	41 d1       	rcall	.+642    	; 0x42e <__divsf3>
 1ac:	a8 d1       	rcall	.+848    	; 0x4fe <__fixsfsi>
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	f4 01       	movw	r30, r8
 1b4:	81 93       	st	Z+, r24
 1b6:	91 93       	st	Z+, r25
 1b8:	4f 01       	movw	r8, r30
 1ba:	21 96       	adiw	r28, 0x01	; 1
}

void BuildScale(uint8_t Type)
{
	float buffer;
	for(uint8_t i = 0; i < 15; i++)
 1bc:	cf 30       	cpi	r28, 0x0F	; 15
 1be:	d1 05       	cpc	r29, r1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <BuildScale+0xb2>
 1c2:	c7 cf       	rjmp	.-114    	; 0x152 <BuildScale+0x40>
		if(Type == LINE)
		{buffer = pgm_read_float_near(&(LinDivArr[i]));}
		
		Scale[i] = Vmax/buffer;
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	9f 90       	pop	r9
 1d8:	8f 90       	pop	r8
 1da:	7f 90       	pop	r7
 1dc:	6f 90       	pop	r6
 1de:	5f 90       	pop	r5
 1e0:	4f 90       	pop	r4
 1e2:	08 95       	ret

000001e4 <MCUInitial>:

void MCUInitial(void)
{
	DDRD = 0xFF;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 1e8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00;
 1ea:	14 ba       	out	0x14, r1	; 20
	
	TCCR0 |= (1 << CS01);//|(1 << CS00);					// Prescaler 64
 1ec:	83 b7       	in	r24, 0x33	; 51
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);								// Enable overflow interruption
 1f2:	89 b7       	in	r24, 0x39	; 57
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	89 bf       	out	0x39, r24	; 57
	
	ADMUX |= (1 << REFS0)|(1 << MUX2)|(1 << MUX0);		// V ref 5V (?), ADC 5
 1f8:	87 b1       	in	r24, 0x07	; 7
 1fa:	85 64       	ori	r24, 0x45	; 69
 1fc:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);			//ADC Enable, Frequency division 64 
 1fe:	86 b1       	in	r24, 0x06	; 6
 200:	85 68       	ori	r24, 0x85	; 133
 202:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADFR);								//Start conversion
 204:	35 9a       	sbi	0x06, 5	; 6
	
	asm("sei");											//Enable global interruptions
 206:	78 94       	sei
}
 208:	08 95       	ret

0000020a <main>:
uint16_t CheckPeak(uint16_t data, uint16_t peak);


int main(void)
{
	MCUInitial();
 20a:	ec df       	rcall	.-40     	; 0x1e4 <MCUInitial>
	BuildScale(LOG);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	81 df       	rcall	.-254    	; 0x112 <BuildScale>
		if(ENDL < LeftBar)
			ENDL = LeftBar;
		else if(ENDL > LeftBar)
			ENDL >>= 1;
		//LeftPeak = CheckPeak(LeftBar, LeftPeak);
        PORTD = ENDL;
 210:	ee e6       	ldi	r30, 0x6E	; 110
 212:	f0 e0       	ldi	r31, 0x00	; 0
		PORTD |= LeftPeak;
 214:	a6 e6       	ldi	r26, 0x66	; 102
 216:	b0 e0       	ldi	r27, 0x00	; 0
		PORTB |= LeftPeak >> 8;
		PORTB |= 0b01000000;
		Mesure = 0;
		ADCRBuf = 0;
		_delay_ms(10);
		PORTD = ENDR;
 218:	cc e6       	ldi	r28, 0x6C	; 108
 21a:	d0 e0       	ldi	r29, 0x00	; 0
	MCUInitial();
	BuildScale(LOG);
    while(1)
    {
		
		if(ENDL < LeftBar)
 21c:	20 91 6e 00 	lds	r18, 0x006E
 220:	30 91 6f 00 	lds	r19, 0x006F
 224:	80 91 72 00 	lds	r24, 0x0072
 228:	90 91 73 00 	lds	r25, 0x0073
 22c:	28 17       	cp	r18, r24
 22e:	39 07       	cpc	r19, r25
 230:	28 f4       	brcc	.+10     	; 0x23c <main+0x32>
			ENDL = LeftBar;
 232:	90 93 6f 00 	sts	0x006F, r25
 236:	80 93 6e 00 	sts	0x006E, r24
 23a:	09 c0       	rjmp	.+18     	; 0x24e <main+0x44>
		else if(ENDL > LeftBar)
 23c:	82 17       	cp	r24, r18
 23e:	93 07       	cpc	r25, r19
 240:	30 f4       	brcc	.+12     	; 0x24e <main+0x44>
			ENDL >>= 1;
 242:	36 95       	lsr	r19
 244:	27 95       	ror	r18
 246:	30 93 6f 00 	sts	0x006F, r19
 24a:	20 93 6e 00 	sts	0x006E, r18
		//LeftPeak = CheckPeak(LeftBar, LeftPeak);
        PORTD = ENDL;
 24e:	80 81       	ld	r24, Z
 250:	82 bb       	out	0x12, r24	; 18
		PORTD |= LeftPeak;
 252:	92 b3       	in	r25, 0x12	; 18
 254:	8c 91       	ld	r24, X
 256:	89 2b       	or	r24, r25
 258:	82 bb       	out	0x12, r24	; 18
		PORTB = 0b00000000 | ENDL >> 8;
 25a:	80 91 6f 00 	lds	r24, 0x006F
 25e:	88 bb       	out	0x18, r24	; 24
		PORTB |= LeftPeak >> 8;
 260:	98 b3       	in	r25, 0x18	; 24
 262:	80 91 67 00 	lds	r24, 0x0067
 266:	89 2b       	or	r24, r25
 268:	88 bb       	out	0x18, r24	; 24
		PORTB |= 0b01000000;
 26a:	c6 9a       	sbi	0x18, 6	; 24
		Mesure = 0;
 26c:	10 92 79 00 	sts	0x0079, r1
		ADCRBuf = 0;
 270:	10 92 69 00 	sts	0x0069, r1
 274:	10 92 68 00 	sts	0x0068, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8f e1       	ldi	r24, 0x1F	; 31
 27a:	9e e4       	ldi	r25, 0x4E	; 78
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x72>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x78>
 282:	00 00       	nop
		_delay_ms(10);
		PORTD = ENDR;
 284:	88 81       	ld	r24, Y
 286:	82 bb       	out	0x12, r24	; 18
		PORTB = 0b00000000 | ENDR >> 8;
 288:	80 91 6d 00 	lds	r24, 0x006D
 28c:	88 bb       	out	0x18, r24	; 24
		PORTB |= 0b10000000;
 28e:	c7 9a       	sbi	0x18, 7	; 24
		Mesure = 0;
		ADCLBuf = 0;
 290:	10 92 6b 00 	sts	0x006B, r1
 294:	10 92 6a 00 	sts	0x006A, r1
 298:	8f e1       	ldi	r24, 0x1F	; 31
 29a:	9e e4       	ldi	r25, 0x4E	; 78
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x92>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x98>
 2a2:	00 00       	nop
 2a4:	bb cf       	rjmp	.-138    	; 0x21c <main+0x12>

000002a6 <BuildBar>:
	
	asm("sei");											//Enable global interruptions
}

uint16_t BuildBar(uint16_t buff, uint8_t type)
{
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	dc 01       	movw	r26, r24
	
	
	uint16_t Bar = 0;
	// Algorithm build bar before it`s be show 
	// 
	if(type == BAR)
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	31 f5       	brne	.+76     	; 0x2fe <BuildBar+0x58>
	{
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
 2b2:	80 91 9b 00 	lds	r24, 0x009B
 2b6:	90 91 9c 00 	lds	r25, 0x009C
 2ba:	8a 17       	cp	r24, r26
 2bc:	9b 07       	cpc	r25, r27
 2be:	d0 f5       	brcc	.+116    	; 0x334 <BuildBar+0x8e>
 2c0:	eb e9       	ldi	r30, 0x9B	; 155
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
	ADCSRA |= (1 << ADFR);								//Start conversion
	
	asm("sei");											//Enable global interruptions
}

uint16_t BuildBar(uint16_t buff, uint8_t type)
 2c4:	bf 01       	movw	r22, r30
 2c6:	6c 51       	subi	r22, 0x1C	; 28
 2c8:	70 40       	sbci	r23, 0x00	; 0
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
	if(type == BAR)
	{
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
			(Bar |= 0b1 << i);
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	c1 e0       	ldi	r28, 0x01	; 1
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
	// 
	if(type == BAR)
	{
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
 2d6:	92 91       	ld	r25, -Z
 2d8:	82 91       	ld	r24, -Z
 2da:	8a 17       	cp	r24, r26
 2dc:	9b 07       	cpc	r25, r27
 2de:	90 f5       	brcc	.+100    	; 0x344 <BuildBar+0x9e>
			(Bar |= 0b1 << i);
 2e0:	ce 01       	movw	r24, r28
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <BuildBar+0x44>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <BuildBar+0x40>
 2ee:	48 2b       	or	r20, r24
 2f0:	59 2b       	or	r21, r25
 2f2:	2f 5f       	subi	r18, 0xFF	; 255
 2f4:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t Bar = 0;
	// Algorithm build bar before it`s be show 
	// 
	if(type == BAR)
	{
		for(uint8_t i = 0; i < 15; i ++)
 2f6:	e6 17       	cp	r30, r22
 2f8:	f7 07       	cpc	r31, r23
 2fa:	69 f7       	brne	.-38     	; 0x2d6 <BuildBar+0x30>
 2fc:	23 c0       	rjmp	.+70     	; 0x344 <BuildBar+0x9e>
			(Bar |= 0b1 << i);
			else
			break;
		}
	}
	else if(type == POINT)	
 2fe:	62 30       	cpi	r22, 0x02	; 2
 300:	e1 f4       	brne	.+56     	; 0x33a <BuildBar+0x94>
	{
		Bar = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
 302:	80 91 9b 00 	lds	r24, 0x009B
 306:	90 91 9c 00 	lds	r25, 0x009C
 30a:	8a 17       	cp	r24, r26
 30c:	9b 07       	cpc	r25, r27
 30e:	c0 f4       	brcc	.+48     	; 0x340 <BuildBar+0x9a>
 310:	eb e9       	ldi	r30, 0x9B	; 155
 312:	f0 e0       	ldi	r31, 0x00	; 0
	ADCSRA |= (1 << ADFR);								//Start conversion
	
	asm("sei");											//Enable global interruptions
}

uint16_t BuildBar(uint16_t buff, uint8_t type)
 314:	9f 01       	movw	r18, r30
 316:	2c 51       	subi	r18, 0x1C	; 28
 318:	30 40       	sbci	r19, 0x00	; 0
	{
		Bar = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
			(Bar <<= 1);
 31a:	42 e0       	ldi	r20, 0x02	; 2
 31c:	50 e0       	ldi	r21, 0x00	; 0
	else if(type == POINT)	
	{
		Bar = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
 31e:	92 91       	ld	r25, -Z
 320:	82 91       	ld	r24, -Z
 322:	8a 17       	cp	r24, r26
 324:	9b 07       	cpc	r25, r27
 326:	70 f4       	brcc	.+28     	; 0x344 <BuildBar+0x9e>
			(Bar <<= 1);
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
		}
	}
	else if(type == POINT)	
	{
		Bar = 1;
		for(uint8_t i = 0; i < 15; i ++)
 32c:	e2 17       	cp	r30, r18
 32e:	f3 07       	cpc	r31, r19
 330:	b1 f7       	brne	.-20     	; 0x31e <BuildBar+0x78>
 332:	08 c0       	rjmp	.+16     	; 0x344 <BuildBar+0x9e>
	// 
	if(type == BAR)
	{
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	05 c0       	rjmp	.+10     	; 0x344 <BuildBar+0x9e>

uint16_t BuildBar(uint16_t buff, uint8_t type)
{
	
	
	uint16_t Bar = 0;
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <BuildBar+0x9e>
	else if(type == POINT)	
	{
		Bar = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(buff > Scale[14-i])
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	50 e0       	ldi	r21, 0x00	; 0
			else
			break;
		}
	}
	return Bar;
}
 344:	84 2f       	mov	r24, r20
 346:	95 2f       	mov	r25, r21
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	08 95       	ret

00000350 <__vector_9>:
		_delay_ms(10);
    }
}

ISR(TIMER0_OVF_vect)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
	
		if(ADCW > ADCLBuf)
 372:	24 b1       	in	r18, 0x04	; 4
 374:	35 b1       	in	r19, 0x05	; 5
 376:	80 91 6a 00 	lds	r24, 0x006A
 37a:	90 91 6b 00 	lds	r25, 0x006B
 37e:	82 17       	cp	r24, r18
 380:	93 07       	cpc	r25, r19
 382:	30 f4       	brcc	.+12     	; 0x390 <__vector_9+0x40>
		ADCLBuf = ADCW;
 384:	84 b1       	in	r24, 0x04	; 4
 386:	95 b1       	in	r25, 0x05	; 5
 388:	90 93 6b 00 	sts	0x006B, r25
 38c:	80 93 6a 00 	sts	0x006A, r24
		LeftBar = BuildBar((ADCLBuf), BAR);
 390:	80 91 6a 00 	lds	r24, 0x006A
 394:	90 91 6b 00 	lds	r25, 0x006B
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	85 df       	rcall	.-246    	; 0x2a6 <BuildBar>
 39c:	90 93 73 00 	sts	0x0073, r25
 3a0:	80 93 72 00 	sts	0x0072, r24
		ADCSRA |= (1 << ADSC);	
 3a4:	36 9a       	sbi	0x06, 6	; 6
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <CheckPeak>:
	}
	return Bar;
}

uint16_t CheckPeak(uint16_t data, uint16_t peak)
{
 3c8:	dc 01       	movw	r26, r24
	if(data > peak)
 3ca:	68 17       	cp	r22, r24
 3cc:	79 07       	cpc	r23, r25
 3ce:	c8 f4       	brcc	.+50     	; 0x402 <CheckPeak+0x3a>
	{
		peak = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(data > Scale[14-i])
 3d0:	80 91 9b 00 	lds	r24, 0x009B
 3d4:	90 91 9c 00 	lds	r25, 0x009C
 3d8:	8a 17       	cp	r24, r26
 3da:	9b 07       	cpc	r25, r27
 3dc:	18 f5       	brcc	.+70     	; 0x424 <CheckPeak+0x5c>
 3de:	eb e9       	ldi	r30, 0x9B	; 155
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	return Bar;
}

uint16_t CheckPeak(uint16_t data, uint16_t peak)
 3e2:	9f 01       	movw	r18, r30
 3e4:	2c 51       	subi	r18, 0x1C	; 28
 3e6:	30 40       	sbci	r19, 0x00	; 0
	{
		peak = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(data > Scale[14-i])
			(peak <<= 1);
 3e8:	42 e0       	ldi	r20, 0x02	; 2
 3ea:	50 e0       	ldi	r21, 0x00	; 0
	if(data > peak)
	{
		peak = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(data > Scale[14-i])
 3ec:	92 91       	ld	r25, -Z
 3ee:	82 91       	ld	r24, -Z
 3f0:	8a 17       	cp	r24, r26
 3f2:	9b 07       	cpc	r25, r27
 3f4:	c8 f4       	brcc	.+50     	; 0x428 <CheckPeak+0x60>
			(peak <<= 1);
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
uint16_t CheckPeak(uint16_t data, uint16_t peak)
{
	if(data > peak)
	{
		peak = 1;
		for(uint8_t i = 0; i < 15; i ++)
 3fa:	e2 17       	cp	r30, r18
 3fc:	f3 07       	cpc	r31, r19
 3fe:	b1 f7       	brne	.-20     	; 0x3ec <CheckPeak+0x24>
 400:	13 c0       	rjmp	.+38     	; 0x428 <CheckPeak+0x60>
			else
			return peak;
		}
		return peak;
	}
	else if((iter > 30)&&(data < peak))
 402:	80 91 78 00 	lds	r24, 0x0078
 406:	8f 31       	cpi	r24, 0x1F	; 31
 408:	48 f0       	brcs	.+18     	; 0x41c <CheckPeak+0x54>
 40a:	a6 17       	cp	r26, r22
 40c:	b7 07       	cpc	r27, r23
 40e:	30 f4       	brcc	.+12     	; 0x41c <CheckPeak+0x54>
	{
		peak >>= 1;
 410:	ab 01       	movw	r20, r22
 412:	56 95       	lsr	r21
 414:	47 95       	ror	r20
		iter = 0;
 416:	10 92 78 00 	sts	0x0078, r1
		return peak;
 41a:	06 c0       	rjmp	.+12     	; 0x428 <CheckPeak+0x60>
	}
	iter++;
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 78 00 	sts	0x0078, r24
 422:	08 95       	ret
	if(data > peak)
	{
		peak = 1;
		for(uint8_t i = 0; i < 15; i ++)
		{
			if(data > Scale[14-i])
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	50 e0       	ldi	r21, 0x00	; 0
		peak >>= 1;
		iter = 0;
		return peak;
	}
	iter++;
 428:	84 2f       	mov	r24, r20
 42a:	95 2f       	mov	r25, r21
 42c:	08 95       	ret

0000042e <__divsf3>:
 42e:	0c d0       	rcall	.+24     	; 0x448 <__divsf3x>
 430:	ae c0       	rjmp	.+348    	; 0x58e <__fp_round>
 432:	a6 d0       	rcall	.+332    	; 0x580 <__fp_pscB>
 434:	40 f0       	brcs	.+16     	; 0x446 <__divsf3+0x18>
 436:	9d d0       	rcall	.+314    	; 0x572 <__fp_pscA>
 438:	30 f0       	brcs	.+12     	; 0x446 <__divsf3+0x18>
 43a:	21 f4       	brne	.+8      	; 0x444 <__divsf3+0x16>
 43c:	5f 3f       	cpi	r21, 0xFF	; 255
 43e:	19 f0       	breq	.+6      	; 0x446 <__divsf3+0x18>
 440:	8f c0       	rjmp	.+286    	; 0x560 <__fp_inf>
 442:	51 11       	cpse	r21, r1
 444:	d8 c0       	rjmp	.+432    	; 0x5f6 <__fp_szero>
 446:	92 c0       	rjmp	.+292    	; 0x56c <__fp_nan>

00000448 <__divsf3x>:
 448:	b3 d0       	rcall	.+358    	; 0x5b0 <__fp_split3>
 44a:	98 f3       	brcs	.-26     	; 0x432 <__divsf3+0x4>

0000044c <__divsf3_pse>:
 44c:	99 23       	and	r25, r25
 44e:	c9 f3       	breq	.-14     	; 0x442 <__divsf3+0x14>
 450:	55 23       	and	r21, r21
 452:	b1 f3       	breq	.-20     	; 0x440 <__divsf3+0x12>
 454:	95 1b       	sub	r25, r21
 456:	55 0b       	sbc	r21, r21
 458:	bb 27       	eor	r27, r27
 45a:	aa 27       	eor	r26, r26
 45c:	62 17       	cp	r22, r18
 45e:	73 07       	cpc	r23, r19
 460:	84 07       	cpc	r24, r20
 462:	38 f0       	brcs	.+14     	; 0x472 <__stack+0x13>
 464:	9f 5f       	subi	r25, 0xFF	; 255
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	44 1f       	adc	r20, r20
 46e:	aa 1f       	adc	r26, r26
 470:	a9 f3       	breq	.-22     	; 0x45c <__divsf3_pse+0x10>
 472:	33 d0       	rcall	.+102    	; 0x4da <__stack+0x7b>
 474:	0e 2e       	mov	r0, r30
 476:	3a f0       	brmi	.+14     	; 0x486 <__stack+0x27>
 478:	e0 e8       	ldi	r30, 0x80	; 128
 47a:	30 d0       	rcall	.+96     	; 0x4dc <__stack+0x7d>
 47c:	91 50       	subi	r25, 0x01	; 1
 47e:	50 40       	sbci	r21, 0x00	; 0
 480:	e6 95       	lsr	r30
 482:	00 1c       	adc	r0, r0
 484:	ca f7       	brpl	.-14     	; 0x478 <__stack+0x19>
 486:	29 d0       	rcall	.+82     	; 0x4da <__stack+0x7b>
 488:	fe 2f       	mov	r31, r30
 48a:	27 d0       	rcall	.+78     	; 0x4da <__stack+0x7b>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	bb 1f       	adc	r27, r27
 494:	26 17       	cp	r18, r22
 496:	37 07       	cpc	r19, r23
 498:	48 07       	cpc	r20, r24
 49a:	ab 07       	cpc	r26, r27
 49c:	b0 e8       	ldi	r27, 0x80	; 128
 49e:	09 f0       	breq	.+2      	; 0x4a2 <__stack+0x43>
 4a0:	bb 0b       	sbc	r27, r27
 4a2:	80 2d       	mov	r24, r0
 4a4:	bf 01       	movw	r22, r30
 4a6:	ff 27       	eor	r31, r31
 4a8:	93 58       	subi	r25, 0x83	; 131
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	2a f0       	brmi	.+10     	; 0x4b8 <__stack+0x59>
 4ae:	9e 3f       	cpi	r25, 0xFE	; 254
 4b0:	51 05       	cpc	r21, r1
 4b2:	68 f0       	brcs	.+26     	; 0x4ce <__stack+0x6f>
 4b4:	55 c0       	rjmp	.+170    	; 0x560 <__fp_inf>
 4b6:	9f c0       	rjmp	.+318    	; 0x5f6 <__fp_szero>
 4b8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ba:	ec f3       	brlt	.-6      	; 0x4b6 <__stack+0x57>
 4bc:	98 3e       	cpi	r25, 0xE8	; 232
 4be:	dc f3       	brlt	.-10     	; 0x4b6 <__stack+0x57>
 4c0:	86 95       	lsr	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f7 95       	ror	r31
 4ca:	9f 5f       	subi	r25, 0xFF	; 255
 4cc:	c9 f7       	brne	.-14     	; 0x4c0 <__stack+0x61>
 4ce:	88 0f       	add	r24, r24
 4d0:	91 1d       	adc	r25, r1
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret
 4da:	e1 e0       	ldi	r30, 0x01	; 1
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	bb 1f       	adc	r27, r27
 4e4:	62 17       	cp	r22, r18
 4e6:	73 07       	cpc	r23, r19
 4e8:	84 07       	cpc	r24, r20
 4ea:	ba 07       	cpc	r27, r26
 4ec:	20 f0       	brcs	.+8      	; 0x4f6 <__stack+0x97>
 4ee:	62 1b       	sub	r22, r18
 4f0:	73 0b       	sbc	r23, r19
 4f2:	84 0b       	sbc	r24, r20
 4f4:	ba 0b       	sbc	r27, r26
 4f6:	ee 1f       	adc	r30, r30
 4f8:	88 f7       	brcc	.-30     	; 0x4dc <__stack+0x7d>
 4fa:	e0 95       	com	r30
 4fc:	08 95       	ret

000004fe <__fixsfsi>:
 4fe:	04 d0       	rcall	.+8      	; 0x508 <__fixunssfsi>
 500:	68 94       	set
 502:	b1 11       	cpse	r27, r1
 504:	78 c0       	rjmp	.+240    	; 0x5f6 <__fp_szero>
 506:	08 95       	ret

00000508 <__fixunssfsi>:
 508:	5b d0       	rcall	.+182    	; 0x5c0 <__fp_splitA>
 50a:	88 f0       	brcs	.+34     	; 0x52e <__fixunssfsi+0x26>
 50c:	9f 57       	subi	r25, 0x7F	; 127
 50e:	90 f0       	brcs	.+36     	; 0x534 <__fixunssfsi+0x2c>
 510:	b9 2f       	mov	r27, r25
 512:	99 27       	eor	r25, r25
 514:	b7 51       	subi	r27, 0x17	; 23
 516:	a0 f0       	brcs	.+40     	; 0x540 <__fixunssfsi+0x38>
 518:	d1 f0       	breq	.+52     	; 0x54e <__fixunssfsi+0x46>
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	1a f0       	brmi	.+6      	; 0x52a <__fixunssfsi+0x22>
 524:	ba 95       	dec	r27
 526:	c9 f7       	brne	.-14     	; 0x51a <__fixunssfsi+0x12>
 528:	12 c0       	rjmp	.+36     	; 0x54e <__fixunssfsi+0x46>
 52a:	b1 30       	cpi	r27, 0x01	; 1
 52c:	81 f0       	breq	.+32     	; 0x54e <__fixunssfsi+0x46>
 52e:	62 d0       	rcall	.+196    	; 0x5f4 <__fp_zero>
 530:	b1 e0       	ldi	r27, 0x01	; 1
 532:	08 95       	ret
 534:	5f c0       	rjmp	.+190    	; 0x5f4 <__fp_zero>
 536:	67 2f       	mov	r22, r23
 538:	78 2f       	mov	r23, r24
 53a:	88 27       	eor	r24, r24
 53c:	b8 5f       	subi	r27, 0xF8	; 248
 53e:	39 f0       	breq	.+14     	; 0x54e <__fixunssfsi+0x46>
 540:	b9 3f       	cpi	r27, 0xF9	; 249
 542:	cc f3       	brlt	.-14     	; 0x536 <__fixunssfsi+0x2e>
 544:	86 95       	lsr	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b3 95       	inc	r27
 54c:	d9 f7       	brne	.-10     	; 0x544 <__fixunssfsi+0x3c>
 54e:	3e f4       	brtc	.+14     	; 0x55e <__fixunssfsi+0x56>
 550:	90 95       	com	r25
 552:	80 95       	com	r24
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	08 95       	ret

00000560 <__fp_inf>:
 560:	97 f9       	bld	r25, 7
 562:	9f 67       	ori	r25, 0x7F	; 127
 564:	80 e8       	ldi	r24, 0x80	; 128
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	08 95       	ret

0000056c <__fp_nan>:
 56c:	9f ef       	ldi	r25, 0xFF	; 255
 56e:	80 ec       	ldi	r24, 0xC0	; 192
 570:	08 95       	ret

00000572 <__fp_pscA>:
 572:	00 24       	eor	r0, r0
 574:	0a 94       	dec	r0
 576:	16 16       	cp	r1, r22
 578:	17 06       	cpc	r1, r23
 57a:	18 06       	cpc	r1, r24
 57c:	09 06       	cpc	r0, r25
 57e:	08 95       	ret

00000580 <__fp_pscB>:
 580:	00 24       	eor	r0, r0
 582:	0a 94       	dec	r0
 584:	12 16       	cp	r1, r18
 586:	13 06       	cpc	r1, r19
 588:	14 06       	cpc	r1, r20
 58a:	05 06       	cpc	r0, r21
 58c:	08 95       	ret

0000058e <__fp_round>:
 58e:	09 2e       	mov	r0, r25
 590:	03 94       	inc	r0
 592:	00 0c       	add	r0, r0
 594:	11 f4       	brne	.+4      	; 0x59a <__fp_round+0xc>
 596:	88 23       	and	r24, r24
 598:	52 f0       	brmi	.+20     	; 0x5ae <__fp_round+0x20>
 59a:	bb 0f       	add	r27, r27
 59c:	40 f4       	brcc	.+16     	; 0x5ae <__fp_round+0x20>
 59e:	bf 2b       	or	r27, r31
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0x18>
 5a2:	60 ff       	sbrs	r22, 0
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <__fp_round+0x20>
 5a6:	6f 5f       	subi	r22, 0xFF	; 255
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <__fp_split3>:
 5b0:	57 fd       	sbrc	r21, 7
 5b2:	90 58       	subi	r25, 0x80	; 128
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	59 f0       	breq	.+22     	; 0x5d0 <__fp_splitA+0x10>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	71 f0       	breq	.+28     	; 0x5da <__fp_splitA+0x1a>
 5be:	47 95       	ror	r20

000005c0 <__fp_splitA>:
 5c0:	88 0f       	add	r24, r24
 5c2:	97 fb       	bst	r25, 7
 5c4:	99 1f       	adc	r25, r25
 5c6:	61 f0       	breq	.+24     	; 0x5e0 <__fp_splitA+0x20>
 5c8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ca:	79 f0       	breq	.+30     	; 0x5ea <__fp_splitA+0x2a>
 5cc:	87 95       	ror	r24
 5ce:	08 95       	ret
 5d0:	12 16       	cp	r1, r18
 5d2:	13 06       	cpc	r1, r19
 5d4:	14 06       	cpc	r1, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	f2 cf       	rjmp	.-28     	; 0x5be <__fp_split3+0xe>
 5da:	46 95       	lsr	r20
 5dc:	f1 df       	rcall	.-30     	; 0x5c0 <__fp_splitA>
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <__fp_splitA+0x30>
 5e0:	16 16       	cp	r1, r22
 5e2:	17 06       	cpc	r1, r23
 5e4:	18 06       	cpc	r1, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	f1 cf       	rjmp	.-30     	; 0x5cc <__fp_splitA+0xc>
 5ea:	86 95       	lsr	r24
 5ec:	71 05       	cpc	r23, r1
 5ee:	61 05       	cpc	r22, r1
 5f0:	08 94       	sec
 5f2:	08 95       	ret

000005f4 <__fp_zero>:
 5f4:	e8 94       	clt

000005f6 <__fp_szero>:
 5f6:	bb 27       	eor	r27, r27
 5f8:	66 27       	eor	r22, r22
 5fa:	77 27       	eor	r23, r23
 5fc:	cb 01       	movw	r24, r22
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
