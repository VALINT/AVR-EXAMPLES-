
1509_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800060  00800060  00000334  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060d  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000117  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ed  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
   2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
   4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
   8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
   a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
   c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
   e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
  10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
  12:	7b c0       	rjmp	.+246    	; 0x10a <__vector_9>
  14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
  16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
  18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
  1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
  1c:	ee c0       	rjmp	.+476    	; 0x1fa <__vector_14>
  1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
  20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
  22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
  24:	2b c0       	rjmp	.+86     	; 0x7c <__bad_interrupt>
  26:	41 c0       	rjmp	.+130    	; 0xaa <_Z6sybmoli+0x10>
  28:	43 c0       	rjmp	.+134    	; 0xb0 <_Z6sybmoli+0x16>
  2a:	45 c0       	rjmp	.+138    	; 0xb6 <_Z6sybmoli+0x1c>
  2c:	47 c0       	rjmp	.+142    	; 0xbc <_Z6sybmoli+0x22>
  2e:	49 c0       	rjmp	.+146    	; 0xc2 <_Z6sybmoli+0x28>
  30:	4b c0       	rjmp	.+150    	; 0xc8 <_Z6sybmoli+0x2e>
  32:	4d c0       	rjmp	.+154    	; 0xce <_Z6sybmoli+0x34>
  34:	4f c0       	rjmp	.+158    	; 0xd4 <_Z6sybmoli+0x3a>
  36:	51 c0       	rjmp	.+162    	; 0xda <_Z6sybmoli+0x40>
  38:	53 c0       	rjmp	.+166    	; 0xe0 <_Z6sybmoli+0x46>
  3a:	55 c0       	rjmp	.+170    	; 0xe6 <_Z6sybmoli+0x4c>
  3c:	57 c0       	rjmp	.+174    	; 0xec <_Z6sybmoli+0x52>
  3e:	59 c0       	rjmp	.+178    	; 0xf2 <_Z6sybmoli+0x58>
  40:	5b c0       	rjmp	.+182    	; 0xf8 <_Z6sybmoli+0x5e>
  42:	5d c0       	rjmp	.+186    	; 0xfe <_Z6sybmoli+0x64>
  44:	5f c0       	rjmp	.+190    	; 0x104 <_Z6sybmoli+0x6a>

00000046 <__ctors_end>:
  46:	11 24       	eor	r1, r1
  48:	1f be       	out	0x3f, r1	; 63
  4a:	cf e5       	ldi	r28, 0x5F	; 95
  4c:	d4 e0       	ldi	r29, 0x04	; 4
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	a0 e6       	ldi	r26, 0x60	; 96
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	e0 ec       	ldi	r30, 0xC0	; 192
  5a:	f2 e0       	ldi	r31, 0x02	; 2
  5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
  5e:	05 90       	lpm	r0, Z+
  60:	0d 92       	st	X+, r0
  62:	a0 36       	cpi	r26, 0x60	; 96
  64:	b1 07       	cpc	r27, r17
  66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
  68:	10 e0       	ldi	r17, 0x00	; 0
  6a:	a0 e6       	ldi	r26, 0x60	; 96
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a8 37       	cpi	r26, 0x78	; 120
  74:	b1 07       	cpc	r27, r17
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	d4 d0       	rcall	.+424    	; 0x222 <main>
  7a:	20 c1       	rjmp	.+576    	; 0x2bc <_exit>

0000007c <__bad_interrupt>:
  7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <_Z7initialv>:

//Функція стартової ініціалізації периферії
void initial(void)
{
	//Ініціалізація таймера 0 для виведення даних на семисегментні індикатори 	
	TCCR0 = (1 << CS01)|(1 << CS00); //попереднє розділення на 128 8МГц/128/265 - переповнень за секунду
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1 << TOIE0);			//увімкнемо переривання по переповненню
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	89 bf       	out	0x39, r24	; 57
	
	//Ініціалізація АЦП
	
	ADMUX = (1 << REFS0); //опорна напруга 5в/активний вхід АЦП5
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)  | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS0)| (1<<ADSC);
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	8b 6c       	ori	r24, 0xCB	; 203
  8e:	86 b9       	out	0x06, r24	; 6
	//Дозволити глобальні переривання
	sei();
  90:	78 94       	sei
	
	//Ініціалізація портів введення/виведення
	DDRD = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xff;
  96:	87 bb       	out	0x17, r24	; 23
	return;
}
  98:	08 95       	ret

0000009a <_Z6sybmoli>:
//Функція формування символів на семисегментному індикаторі
int sybmol(int x)
{
	switch (x)
  9a:	80 31       	cpi	r24, 0x10	; 16
  9c:	91 05       	cpc	r25, r1
  9e:	a0 f5       	brcc	.+104    	; 0x108 <_Z6sybmoli+0x6e>
  a0:	8d 5e       	subi	r24, 0xED	; 237
  a2:	9f 4f       	sbci	r25, 0xFF	; 255
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	08 95       	ret
	{
		// 0
		case 0:
			indicator_port = 0b00111111;
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	82 bb       	out	0x12, r24	; 18
			break;
  ae:	08 95       	ret
		// 1
		case 1:
			indicator_port = 0b00001001;
  b0:	89 e0       	ldi	r24, 0x09	; 9
  b2:	82 bb       	out	0x12, r24	; 18
			break;
  b4:	08 95       	ret
		// 2
		case 2:
			indicator_port = 0b01011110;
  b6:	8e e5       	ldi	r24, 0x5E	; 94
  b8:	82 bb       	out	0x12, r24	; 18
			break;
  ba:	08 95       	ret
		// 3
		case 3:
			indicator_port = 0b01011011;
  bc:	8b e5       	ldi	r24, 0x5B	; 91
  be:	82 bb       	out	0x12, r24	; 18
			break;
  c0:	08 95       	ret
		// 4
		case 4:
			indicator_port = 0b01101001;
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	82 bb       	out	0x12, r24	; 18
			break;
  c6:	08 95       	ret
		// 5
		case 5:
			indicator_port = 0b01110011;
  c8:	83 e7       	ldi	r24, 0x73	; 115
  ca:	82 bb       	out	0x12, r24	; 18
			break;
  cc:	08 95       	ret
		// 6
		case 6:
			indicator_port = 0b01110111;
  ce:	87 e7       	ldi	r24, 0x77	; 119
  d0:	82 bb       	out	0x12, r24	; 18
			break;
  d2:	08 95       	ret
		// 7
		case 7:
			indicator_port = 0b00011001;
  d4:	89 e1       	ldi	r24, 0x19	; 25
  d6:	82 bb       	out	0x12, r24	; 18
			break;
  d8:	08 95       	ret
		// 8
		case 8:
			indicator_port = 0b01111111;
  da:	8f e7       	ldi	r24, 0x7F	; 127
  dc:	82 bb       	out	0x12, r24	; 18
			break;
  de:	08 95       	ret
		// 9
		case 9:
			indicator_port = 0b01111011;
  e0:	8b e7       	ldi	r24, 0x7B	; 123
  e2:	82 bb       	out	0x12, r24	; 18
			break;
  e4:	08 95       	ret
		// А
		case 10:
			indicator_port = 0b01111101;
  e6:	8d e7       	ldi	r24, 0x7D	; 125
  e8:	82 bb       	out	0x12, r24	; 18
			break;
  ea:	08 95       	ret
		// В
		case 11:
			indicator_port = 0b01111111;
  ec:	8f e7       	ldi	r24, 0x7F	; 127
  ee:	82 bb       	out	0x12, r24	; 18
			break;
  f0:	08 95       	ret
		// С
		case 12:
			indicator_port = 0b00110110;
  f2:	86 e3       	ldi	r24, 0x36	; 54
  f4:	82 bb       	out	0x12, r24	; 18
			break;
  f6:	08 95       	ret
		// D
		case 13:
			indicator_port = 0b00111111;
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	82 bb       	out	0x12, r24	; 18
			break;
  fc:	08 95       	ret
		// E
		case 14:
			indicator_port = 0b01110110;
  fe:	86 e7       	ldi	r24, 0x76	; 118
 100:	82 bb       	out	0x12, r24	; 18
			break;
 102:	08 95       	ret
		// F
		case 15:
			indicator_port = 0b01110100;
 104:	84 e7       	ldi	r24, 0x74	; 116
 106:	82 bb       	out	0x12, r24	; 18
		// point
		// degree
		
			return(x);
	}
}
 108:	08 95       	ret

0000010a <__vector_9>:
//Обробник переривань по переповненню таймера 0
//Обробник формує для виведення та виводить дані на семисегментні індикатори
ISR (TIMER0_OVF_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
		hgr = amparage/100;
 12c:	80 91 62 00 	lds	r24, 0x0062
 130:	90 91 63 00 	lds	r25, 0x0063
 134:	64 e6       	ldi	r22, 0x64	; 100
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	9a d0       	rcall	.+308    	; 0x26e <__divmodhi4>
 13a:	70 93 73 00 	sts	0x0073, r23
 13e:	60 93 72 00 	sts	0x0072, r22
		dec = (amparage%100)/10;
 142:	6a e0       	ldi	r22, 0x0A	; 10
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	93 d0       	rcall	.+294    	; 0x26e <__divmodhi4>
 148:	70 93 71 00 	sts	0x0071, r23
 14c:	60 93 70 00 	sts	0x0070, r22
		uni = (amparage%100)%10;
 150:	90 93 6f 00 	sts	0x006F, r25
 154:	80 93 6e 00 	sts	0x006E, r24
	
	digita = 0;
 158:	18 ba       	out	0x18, r1	; 24
	digit++; 
 15a:	80 91 76 00 	lds	r24, 0x0076
 15e:	90 91 77 00 	lds	r25, 0x0077
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 77 00 	sts	0x0077, r25
 168:	80 93 76 00 	sts	0x0076, r24
	
	if(digit > 5)
 16c:	86 30       	cpi	r24, 0x06	; 6
 16e:	91 05       	cpc	r25, r1
 170:	28 f0       	brcs	.+10     	; 0x17c <__vector_9+0x72>
	digit = 0;
 172:	10 92 77 00 	sts	0x0077, r1
 176:	10 92 76 00 	sts	0x0076, r1
 17a:	2e c0       	rjmp	.+92     	; 0x1d8 <__vector_9+0xce>
	
	switch(digit)
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	91 05       	cpc	r25, r1
 180:	b1 f0       	breq	.+44     	; 0x1ae <__vector_9+0xa4>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	91 05       	cpc	r25, r1
 186:	20 f4       	brcc	.+8      	; 0x190 <__vector_9+0x86>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	91 05       	cpc	r25, r1
 18c:	29 f5       	brne	.+74     	; 0x1d8 <__vector_9+0xce>
 18e:	07 c0       	rjmp	.+14     	; 0x19e <__vector_9+0x94>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	91 05       	cpc	r25, r1
 194:	a1 f0       	breq	.+40     	; 0x1be <__vector_9+0xb4>
 196:	85 30       	cpi	r24, 0x05	; 5
 198:	91 05       	cpc	r25, r1
 19a:	f1 f4       	brne	.+60     	; 0x1d8 <__vector_9+0xce>
 19c:	18 c0       	rjmp	.+48     	; 0x1ce <__vector_9+0xc4>
	{
		case 1:
		digita = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	88 bb       	out	0x18, r24	; 24
		sybmol(hgr);
 1a2:	80 91 72 00 	lds	r24, 0x0072
 1a6:	90 91 73 00 	lds	r25, 0x0073
 1aa:	77 df       	rcall	.-274    	; 0x9a <_Z6sybmoli>
		break;
 1ac:	15 c0       	rjmp	.+42     	; 0x1d8 <__vector_9+0xce>
		case 2:
		digita = 2;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	88 bb       	out	0x18, r24	; 24
		sybmol(dec);
 1b2:	80 91 70 00 	lds	r24, 0x0070
 1b6:	90 91 71 00 	lds	r25, 0x0071
 1ba:	6f df       	rcall	.-290    	; 0x9a <_Z6sybmoli>
		break;
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <__vector_9+0xce>
		case 3:
		sybmol(uni);
 1be:	80 91 6e 00 	lds	r24, 0x006E
 1c2:	90 91 6f 00 	lds	r25, 0x006F
 1c6:	69 df       	rcall	.-302    	; 0x9a <_Z6sybmoli>
		digita = 4;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	88 bb       	out	0x18, r24	; 24
		break;
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <__vector_9+0xce>
		case 5:
		sybmol(10);
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	63 df       	rcall	.-314    	; 0x9a <_Z6sybmoli>
		digita = 16;
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	88 bb       	out	0x18, r24	; 24
		break;
	}
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_14>:

ISR (ADC_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	data = ADCW;
 208:	84 b1       	in	r24, 0x04	; 4
 20a:	95 b1       	in	r25, 0x05	; 5
 20c:	90 93 69 00 	sts	0x0069, r25
 210:	80 93 68 00 	sts	0x0068, r24
}
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <main>:

int main(void)
{
	if(ini == 0)
 222:	80 91 66 00 	lds	r24, 0x0066
 226:	90 91 67 00 	lds	r25, 0x0067
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	39 f4       	brne	.+14     	; 0x23c <main+0x1a>
	{
	ini ++;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 67 00 	sts	0x0067, r25
 236:	80 93 66 00 	sts	0x0066, r24
	initial();
 23a:	21 df       	rcall	.-446    	; 0x7e <_Z7initialv>
	}	
	while(1)
	{
		if(adc<data)
 23c:	80 91 68 00 	lds	r24, 0x0068
 240:	90 91 69 00 	lds	r25, 0x0069
 244:	20 91 6a 00 	lds	r18, 0x006A
 248:	30 91 6b 00 	lds	r19, 0x006B
 24c:	28 17       	cp	r18, r24
 24e:	39 07       	cpc	r19, r25
 250:	20 f4       	brcc	.+8      	; 0x25a <main+0x38>
		adc = data;
 252:	90 93 6b 00 	sts	0x006B, r25
 256:	80 93 6a 00 	sts	0x006A, r24
	amparage = adc;
 25a:	80 91 6a 00 	lds	r24, 0x006A
 25e:	90 91 6b 00 	lds	r25, 0x006B
 262:	90 93 63 00 	sts	0x0063, r25
 266:	80 93 62 00 	sts	0x0062, r24
	ADCSRA |= (1<<ADSC);
 26a:	36 9a       	sbi	0x06, 6	; 6
	if(ini == 0)
	{
	ini ++;
	initial();
	}	
	while(1)
 26c:	e7 cf       	rjmp	.-50     	; 0x23c <main+0x1a>

0000026e <__divmodhi4>:
 26e:	97 fb       	bst	r25, 7
 270:	09 2e       	mov	r0, r25
 272:	07 26       	eor	r0, r23
 274:	0a d0       	rcall	.+20     	; 0x28a <__divmodhi4_neg1>
 276:	77 fd       	sbrc	r23, 7
 278:	04 d0       	rcall	.+8      	; 0x282 <__divmodhi4_neg2>
 27a:	0c d0       	rcall	.+24     	; 0x294 <__udivmodhi4>
 27c:	06 d0       	rcall	.+12     	; 0x28a <__divmodhi4_neg1>
 27e:	00 20       	and	r0, r0
 280:	1a f4       	brpl	.+6      	; 0x288 <__divmodhi4_exit>

00000282 <__divmodhi4_neg2>:
 282:	70 95       	com	r23
 284:	61 95       	neg	r22
 286:	7f 4f       	sbci	r23, 0xFF	; 255

00000288 <__divmodhi4_exit>:
 288:	08 95       	ret

0000028a <__divmodhi4_neg1>:
 28a:	f6 f7       	brtc	.-4      	; 0x288 <__divmodhi4_exit>
 28c:	90 95       	com	r25
 28e:	81 95       	neg	r24
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	08 95       	ret

00000294 <__udivmodhi4>:
 294:	aa 1b       	sub	r26, r26
 296:	bb 1b       	sub	r27, r27
 298:	51 e1       	ldi	r21, 0x11	; 17
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <__udivmodhi4_ep>

0000029c <__udivmodhi4_loop>:
 29c:	aa 1f       	adc	r26, r26
 29e:	bb 1f       	adc	r27, r27
 2a0:	a6 17       	cp	r26, r22
 2a2:	b7 07       	cpc	r27, r23
 2a4:	10 f0       	brcs	.+4      	; 0x2aa <__udivmodhi4_ep>
 2a6:	a6 1b       	sub	r26, r22
 2a8:	b7 0b       	sbc	r27, r23

000002aa <__udivmodhi4_ep>:
 2aa:	88 1f       	adc	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	5a 95       	dec	r21
 2b0:	a9 f7       	brne	.-22     	; 0x29c <__udivmodhi4_loop>
 2b2:	80 95       	com	r24
 2b4:	90 95       	com	r25
 2b6:	bc 01       	movw	r22, r24
 2b8:	cd 01       	movw	r24, r26
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
