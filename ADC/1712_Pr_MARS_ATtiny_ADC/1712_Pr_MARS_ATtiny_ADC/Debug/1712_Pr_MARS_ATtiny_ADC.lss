
1712_Pr_MARS_ATtiny_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000622  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000006b6  2**0
                  ALLOC
  3 .stab         00001e60  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000645  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00002b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f6  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000357  00000000  00000000  00003536  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000756  00000000  00000000  0000388d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00003fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022f  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024b  00000000  00000000  000042db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
   a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
  10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
  12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
  14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
  16:	2a c0       	rjmp	.+84     	; 0x6c <__bad_interrupt>
  18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
  1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
  1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
  1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
  22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
  24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
  26:	aa c0       	rjmp	.+340    	; 0x17c <Replacement+0x32>
  28:	ab c0       	rjmp	.+342    	; 0x180 <Replacement+0x36>
  2a:	97 c0       	rjmp	.+302    	; 0x15a <Replacement+0x10>
  2c:	98 c0       	rjmp	.+304    	; 0x15e <Replacement+0x14>
  2e:	99 c0       	rjmp	.+306    	; 0x162 <Replacement+0x18>
  30:	9a c0       	rjmp	.+308    	; 0x166 <Replacement+0x1c>
  32:	9b c0       	rjmp	.+310    	; 0x16a <Replacement+0x20>
  34:	9c c0       	rjmp	.+312    	; 0x16e <Replacement+0x24>
  36:	9d c0       	rjmp	.+314    	; 0x172 <Replacement+0x28>
  38:	9e c0       	rjmp	.+316    	; 0x176 <Replacement+0x2c>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf ed       	ldi	r28, 0xDF	; 223
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e2 e2       	ldi	r30, 0x22	; 34
  4a:	f6 e0       	ldi	r31, 0x06	; 6
  4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
  58:	10 e0       	ldi	r17, 0x00	; 0
  5a:	a0 e6       	ldi	r26, 0x60	; 96
  5c:	b0 e0       	ldi	r27, 0x00	; 0
  5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
  60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
  62:	aa 36       	cpi	r26, 0x6A	; 106
  64:	b1 07       	cpc	r27, r17
  66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
  68:	02 d0       	rcall	.+4      	; 0x6e <main>
  6a:	d9 c2       	rjmp	.+1458   	; 0x61e <_exit>

0000006c <__bad_interrupt>:
  6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <main>:
#include "Measuring.h"

int main(void)
{
	
	DDRD |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1 << 4)|(1 << 5);
  6e:	81 b3       	in	r24, 0x11	; 17
  70:	8f 63       	ori	r24, 0x3F	; 63
  72:	81 bb       	out	0x11, r24	; 17
	DDRB |= 0xFF;
  74:	87 b3       	in	r24, 0x17	; 23
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	87 bb       	out	0x17, r24	; 23
	DDRA |= (1 << 0)|(1 << 1);
  7a:	8a b3       	in	r24, 0x1a	; 26
  7c:	83 60       	ori	r24, 0x03	; 3
  7e:	8a bb       	out	0x1a, r24	; 26
	uint8_t multiplier = 3;
	if(PIND & (1 << 3)) multiplier = 10;
  80:	83 99       	sbic	0x10, 3	; 16
  82:	02 c0       	rjmp	.+4      	; 0x88 <main+0x1a>
{
	
	DDRD |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1 << 4)|(1 << 5);
	DDRB |= 0xFF;
	DDRA |= (1 << 0)|(1 << 1);
	uint8_t multiplier = 3;
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	01 c0       	rjmp	.+2      	; 0x8a <main+0x1c>
	if(PIND & (1 << 3)) multiplier = 10;
  88:	8a e0       	ldi	r24, 0x0A	; 10
	
	
	if(PINA & ((0 << 1)&&(1 << 0)))multiplier = 2;
  8a:	99 b3       	in	r25, 0x19	; 25
	if(PINA & ((0 << 1)&&(0 << 0)))multiplier = 1;
  8c:	99 b3       	in	r25, 0x19	; 25
	float a = 0; 
    while(1)
    {
		for(uint8_t i = 0; i < 10; i++)
  8e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			a = Measure()*0.004895*multiplier;
  90:	88 2e       	mov	r8, r24
  92:	99 24       	eor	r9, r9
  94:	aa 24       	eor	r10, r10
  96:	bb 24       	eor	r11, r11
	if(PINA & ((0 << 1)&&(1 << 0)))multiplier = 2;
	if(PINA & ((0 << 1)&&(0 << 0)))multiplier = 1;
	float a = 0; 
    while(1)
    {
		for(uint8_t i = 0; i < 10; i++)
  98:	d0 e0       	ldi	r29, 0x00	; 0
		{
			a = Measure()*0.004895*multiplier;
  9a:	1f d0       	rcall	.+62     	; 0xda <Measure>
  9c:	bc 01       	movw	r22, r24
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	94 d1       	rcall	.+808    	; 0x3cc <__floatunsisf>
  a4:	2c e3       	ldi	r18, 0x3C	; 60
  a6:	36 e6       	ldi	r19, 0x66	; 102
  a8:	40 ea       	ldi	r20, 0xA0	; 160
  aa:	5b e3       	ldi	r21, 0x3B	; 59
  ac:	41 d2       	rcall	.+1154   	; 0x530 <__mulsf3>
  ae:	6b 01       	movw	r12, r22
  b0:	7c 01       	movw	r14, r24
  b2:	c5 01       	movw	r24, r10
  b4:	b4 01       	movw	r22, r8
  b6:	8c d1       	rcall	.+792    	; 0x3d0 <__floatsisf>
  b8:	9b 01       	movw	r18, r22
  ba:	ac 01       	movw	r20, r24
  bc:	c7 01       	movw	r24, r14
  be:	b6 01       	movw	r22, r12
  c0:	37 d2       	rcall	.+1134   	; 0x530 <__mulsf3>
			Fill_Display(a);  
  c2:	60 d0       	rcall	.+192    	; 0x184 <Fill_Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	83 ec       	ldi	r24, 0xC3	; 195
  c6:	99 e0       	ldi	r25, 0x09	; 9
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x5a>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x60>
  ce:	00 00       	nop
	if(PINA & ((0 << 1)&&(1 << 0)))multiplier = 2;
	if(PINA & ((0 << 1)&&(0 << 0)))multiplier = 1;
	float a = 0; 
    while(1)
    {
		for(uint8_t i = 0; i < 10; i++)
  d0:	cf 5f       	subi	r28, 0xFF	; 255
  d2:	ca 30       	cpi	r28, 0x0A	; 10
  d4:	10 f3       	brcs	.-60     	; 0x9a <main+0x2c>
  d6:	cd 2f       	mov	r28, r29
  d8:	e0 cf       	rjmp	.-64     	; 0x9a <main+0x2c>

000000da <Measure>:
 */ 
#include "Measuring.h"


uint16_t Measure(void)
{
  da:	ea e0       	ldi	r30, 0x0A	; 10
	uint16_t help = 0b1000000000, voltage = 0;
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	92 e0       	ldi	r25, 0x02	; 2
	for(uint8_t tact = 0; tact < 10; tact ++)
	{
		PORTB = (voltage|help)>>2;
  e4:	ba 01       	movw	r22, r20
  e6:	68 2b       	or	r22, r24
  e8:	79 2b       	or	r23, r25
  ea:	9b 01       	movw	r18, r22
  ec:	36 95       	lsr	r19
  ee:	27 95       	ror	r18
  f0:	36 95       	lsr	r19
  f2:	27 95       	ror	r18
  f4:	28 bb       	out	0x18, r18	; 24
		PORTA = voltage|help;
  f6:	28 2f       	mov	r18, r24
  f8:	24 2b       	or	r18, r20
  fa:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2e e1       	ldi	r18, 0x1E	; 30
  fe:	2a 95       	dec	r18
 100:	f1 f7       	brne	.-4      	; 0xfe <__stack+0x1f>
		_delay_us(90);
		if(PIND & (1 << 6)){help >>= 1;}
 102:	86 9b       	sbis	0x10, 6	; 16
 104:	03 c0       	rjmp	.+6      	; 0x10c <__stack+0x2d>
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	03 c0       	rjmp	.+6      	; 0x112 <__stack+0x33>
		else{voltage |= help; help >>= 1;} 
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	ab 01       	movw	r20, r22
 112:	e1 50       	subi	r30, 0x01	; 1


uint16_t Measure(void)
{
	uint16_t help = 0b1000000000, voltage = 0;
	for(uint8_t tact = 0; tact < 10; tact ++)
 114:	39 f7       	brne	.-50     	; 0xe4 <__stack+0x5>
		PORTA = voltage|help;
		_delay_us(90);
		if(PIND & (1 << 6)){help >>= 1;}
		else{voltage |= help; help >>= 1;} 
	}
	PORTB = 0;
 116:	18 ba       	out	0x18, r1	; 24
	return voltage;
 118:	84 2f       	mov	r24, r20
 11a:	95 2f       	mov	r25, r21
 11c:	08 95       	ret

0000011e <Clock>:

// This function make clock pulse on tact input in shift register.
// Shift register shifts data on rising front
//____________________________________________________
void Clock()
{	asm("nop");DATA_PORT |= (1 << CLC);
 11e:	00 00       	nop
 120:	90 9a       	sbi	0x12, 0	; 18
	asm("nop");DATA_PORT &=~ (1 << CLC);
 122:	00 00       	nop
 124:	90 98       	cbi	0x12, 0	; 18
}
 126:	08 95       	ret

00000128 <Sent_Number>:
//////////////////////////////////////////////////////

// This function sent data byte to the shift register
//____________________________________________________	
void Sent_Number(uint8_t numb)
{uint8_t buffer;
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	d8 2f       	mov	r29, r24
 12e:	c8 e0       	ldi	r28, 0x08	; 8
	
	for(uint8_t byte_n = 0; byte_n < 8; byte_n ++)
	{if((numb & 0b00000001) == 1)
 130:	d0 ff       	sbrs	r29, 0
 132:	03 c0       	rjmp	.+6      	; 0x13a <Sent_Number+0x12>
		{	DATA_PORT |= (1 << DATA);Clock();}
 134:	91 9a       	sbi	0x12, 1	; 18
 136:	f3 df       	rcall	.-26     	; 0x11e <Clock>
 138:	02 c0       	rjmp	.+4      	; 0x13e <Sent_Number+0x16>
		else
		{	DATA_PORT &=~ (1 << DATA);Clock();}		
 13a:	91 98       	cbi	0x12, 1	; 18
 13c:	f0 df       	rcall	.-32     	; 0x11e <Clock>
	numb = numb >> 1;
 13e:	d6 95       	lsr	r29
 140:	c1 50       	subi	r28, 0x01	; 1
// This function sent data byte to the shift register
//____________________________________________________	
void Sent_Number(uint8_t numb)
{uint8_t buffer;
	
	for(uint8_t byte_n = 0; byte_n < 8; byte_n ++)
 142:	b1 f7       	brne	.-20     	; 0x130 <Sent_Number+0x8>
	{if((numb & 0b00000001) == 1)
		{	DATA_PORT |= (1 << DATA);Clock();}
		else
		{	DATA_PORT &=~ (1 << DATA);Clock();}		
	numb = numb >> 1;
}}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <Replacement>:
	PORTD &=~ (1 << Third_Digit);
	asm("nop");
}

uint8_t Replacement(uint8_t number)
{	switch (number){	
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ea 30       	cpi	r30, 0x0A	; 10
 150:	f1 05       	cpc	r31, r1
 152:	98 f4       	brcc	.+38     	; 0x17a <Replacement+0x30>
 154:	ed 5e       	subi	r30, 0xED	; 237
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	09 94       	ijmp
		case 0:return 0b11110101;break;
		case 1:return 0b00010100;break;
		case 2:return 0b11011001;break;
 15a:	89 ed       	ldi	r24, 0xD9	; 217
 15c:	08 95       	ret
		case 3:return 0b01011101;break;
 15e:	8d e5       	ldi	r24, 0x5D	; 93
 160:	08 95       	ret
		case 4:return 0b00111100;break;
 162:	8c e3       	ldi	r24, 0x3C	; 60
 164:	08 95       	ret
		case 5:return 0b01101101;break;
 166:	8d e6       	ldi	r24, 0x6D	; 109
 168:	08 95       	ret
		case 6:return 0b11101101;break;
 16a:	8d ee       	ldi	r24, 0xED	; 237
 16c:	08 95       	ret
		case 7:return 0b01010100;break;
 16e:	84 e5       	ldi	r24, 0x54	; 84
 170:	08 95       	ret
		case 8:return 0b11111101;break;
 172:	8d ef       	ldi	r24, 0xFD	; 253
 174:	08 95       	ret
		case 9:return 0b01111101;break;
 176:	8d e7       	ldi	r24, 0x7D	; 125
 178:	08 95       	ret
 17a:	08 95       	ret
	asm("nop");
}

uint8_t Replacement(uint8_t number)
{	switch (number){	
		case 0:return 0b11110101;break;
 17c:	85 ef       	ldi	r24, 0xF5	; 245
 17e:	08 95       	ret
		case 1:return 0b00010100;break;
 180:	84 e1       	ldi	r24, 0x14	; 20
		case 5:return 0b01101101;break;
		case 6:return 0b11101101;break;
		case 7:return 0b01010100;break;
		case 8:return 0b11111101;break;
		case 9:return 0b01111101;break;
 182:	08 95       	ret

00000184 <Fill_Display>:
//////////////////////////////////////////////////////

// This function fill seven-segment display on four signs
//____________________________________________________
void Fill_Display(float value)
{
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	6b 01       	movw	r12, r22
 192:	7c 01       	movw	r14, r24
	static uint8_t WholePart, FractionalPart, FirstDigit, SecondDigit, ThirdDigit, FourthDigit, MODE = 0;
	static float ValueBuffer;	
	ValueBuffer = value;
 194:	60 93 60 00 	sts	0x0060, r22
 198:	70 93 61 00 	sts	0x0061, r23
 19c:	80 93 62 00 	sts	0x0062, r24
 1a0:	90 93 63 00 	sts	0x0063, r25
	WholePart = value;
 1a4:	e7 d0       	rcall	.+462    	; 0x374 <__fixunssfsi>
 1a6:	c6 2f       	mov	r28, r22
 1a8:	60 93 64 00 	sts	0x0064, r22
	FractionalPart = (ValueBuffer - WholePart)*100;
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e d1       	rcall	.+540    	; 0x3d0 <__floatsisf>
 1b4:	9b 01       	movw	r18, r22
 1b6:	ac 01       	movw	r20, r24
 1b8:	c7 01       	movw	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	72 d0       	rcall	.+228    	; 0x2a2 <__subsf3>
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	48 ec       	ldi	r20, 0xC8	; 200
 1c4:	52 e4       	ldi	r21, 0x42	; 66
 1c6:	b4 d1       	rcall	.+872    	; 0x530 <__mulsf3>
 1c8:	d5 d0       	rcall	.+426    	; 0x374 <__fixunssfsi>
 1ca:	d6 2f       	mov	r29, r22
 1cc:	60 93 65 00 	sts	0x0065, r22
	if(ValueBuffer < 10)
 1d0:	c7 01       	movw	r24, r14
 1d2:	b6 01       	movw	r22, r12
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e2       	ldi	r20, 0x20	; 32
 1da:	51 e4       	ldi	r21, 0x41	; 65
 1dc:	c7 d0       	rcall	.+398    	; 0x36c <__cmpsf2>
 1de:	88 23       	and	r24, r24
 1e0:	7c f4       	brge	.+30     	; 0x200 <Fill_Display+0x7c>
	{
		MODE = 0;
 1e2:	10 92 66 00 	sts	0x0066, r1
		FirstDigit = WholePart%10;
 1e6:	2a e0       	ldi	r18, 0x0A	; 10
 1e8:	8c 2f       	mov	r24, r28
 1ea:	62 2f       	mov	r22, r18
 1ec:	0c d2       	rcall	.+1048   	; 0x606 <__udivmodqi4>
 1ee:	90 93 67 00 	sts	0x0067, r25
		SecondDigit = FractionalPart/10;
 1f2:	8d 2f       	mov	r24, r29
 1f4:	08 d2       	rcall	.+1040   	; 0x606 <__udivmodqi4>
 1f6:	80 93 68 00 	sts	0x0068, r24
		ThirdDigit = FractionalPart%10;
 1fa:	90 93 69 00 	sts	0x0069, r25
 1fe:	0f c0       	rjmp	.+30     	; 0x21e <Fill_Display+0x9a>
	}
	else
	{
		MODE = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 66 00 	sts	0x0066, r24
		FirstDigit = WholePart/10;
 206:	2a e0       	ldi	r18, 0x0A	; 10
 208:	8c 2f       	mov	r24, r28
 20a:	62 2f       	mov	r22, r18
 20c:	fc d1       	rcall	.+1016   	; 0x606 <__udivmodqi4>
 20e:	80 93 67 00 	sts	0x0067, r24
		SecondDigit = WholePart%10;
 212:	90 93 68 00 	sts	0x0068, r25
		ThirdDigit = FractionalPart/10;
 216:	8d 2f       	mov	r24, r29
 218:	f6 d1       	rcall	.+1004   	; 0x606 <__udivmodqi4>
 21a:	80 93 69 00 	sts	0x0069, r24
	}
	
	// First digit ()
	if(MODE == 0){Sent_Number((Replacement(FirstDigit))|0b00000010);}
 21e:	80 91 66 00 	lds	r24, 0x0066
 222:	88 23       	and	r24, r24
 224:	31 f4       	brne	.+12     	; 0x232 <Fill_Display+0xae>
 226:	80 91 67 00 	lds	r24, 0x0067
 22a:	8f df       	rcall	.-226    	; 0x14a <Replacement>
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	7c df       	rcall	.-264    	; 0x128 <Sent_Number>
 230:	04 c0       	rjmp	.+8      	; 0x23a <Fill_Display+0xb6>
	else {Sent_Number(Replacement(FirstDigit));}
 232:	80 91 67 00 	lds	r24, 0x0067
 236:	89 df       	rcall	.-238    	; 0x14a <Replacement>
 238:	77 df       	rcall	.-274    	; 0x128 <Sent_Number>
	PORTD |= (1 << First_Digit);
 23a:	94 9a       	sbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	83 ef       	ldi	r24, 0xF3	; 243
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <Fill_Display+0xbc>
 244:	00 c0       	rjmp	.+0      	; 0x246 <Fill_Display+0xc2>
 246:	00 00       	nop
	_delay_ms(2);
	PORTD &=~ (1 << First_Digit);
 248:	94 98       	cbi	0x12, 4	; 18
	asm("nop");	
 24a:	00 00       	nop
	// Second digit 
	if(MODE == 1) {Sent_Number((Replacement(SecondDigit))|0b00000010);}
 24c:	80 91 66 00 	lds	r24, 0x0066
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	31 f4       	brne	.+12     	; 0x260 <Fill_Display+0xdc>
 254:	80 91 68 00 	lds	r24, 0x0068
 258:	78 df       	rcall	.-272    	; 0x14a <Replacement>
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	65 df       	rcall	.-310    	; 0x128 <Sent_Number>
 25e:	04 c0       	rjmp	.+8      	; 0x268 <Fill_Display+0xe4>
	else {Sent_Number(Replacement(SecondDigit));}
 260:	80 91 68 00 	lds	r24, 0x0068
 264:	72 df       	rcall	.-284    	; 0x14a <Replacement>
 266:	60 df       	rcall	.-320    	; 0x128 <Sent_Number>
	PORTD |= (1 << Second_Digit);
 268:	92 9a       	sbi	0x12, 2	; 18
 26a:	83 ef       	ldi	r24, 0xF3	; 243
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <Fill_Display+0xea>
 272:	00 c0       	rjmp	.+0      	; 0x274 <Fill_Display+0xf0>
 274:	00 00       	nop
	_delay_ms(2);
	PORTD &=~ (1 << Second_Digit);
 276:	92 98       	cbi	0x12, 2	; 18
	asm("nop");
 278:	00 00       	nop
	// Third digit
	Sent_Number(Replacement(ThirdDigit));
 27a:	80 91 69 00 	lds	r24, 0x0069
 27e:	65 df       	rcall	.-310    	; 0x14a <Replacement>
 280:	53 df       	rcall	.-346    	; 0x128 <Sent_Number>
	PORTD |= (1 << Third_Digit);
 282:	95 9a       	sbi	0x12, 5	; 18
 284:	83 ef       	ldi	r24, 0xF3	; 243
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <Fill_Display+0x104>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <Fill_Display+0x10a>
 28e:	00 00       	nop
	_delay_ms(2);
	PORTD &=~ (1 << Third_Digit);
 290:	95 98       	cbi	0x12, 5	; 18
	asm("nop");
 292:	00 00       	nop
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	08 95       	ret

000002a2 <__subsf3>:
 2a2:	50 58       	subi	r21, 0x80	; 128

000002a4 <__addsf3>:
 2a4:	bb 27       	eor	r27, r27
 2a6:	aa 27       	eor	r26, r26
 2a8:	0e d0       	rcall	.+28     	; 0x2c6 <__addsf3x>
 2aa:	08 c1       	rjmp	.+528    	; 0x4bc <__fp_round>
 2ac:	f9 d0       	rcall	.+498    	; 0x4a0 <__fp_pscA>
 2ae:	30 f0       	brcs	.+12     	; 0x2bc <__addsf3+0x18>
 2b0:	fe d0       	rcall	.+508    	; 0x4ae <__fp_pscB>
 2b2:	20 f0       	brcs	.+8      	; 0x2bc <__addsf3+0x18>
 2b4:	31 f4       	brne	.+12     	; 0x2c2 <__addsf3+0x1e>
 2b6:	9f 3f       	cpi	r25, 0xFF	; 255
 2b8:	11 f4       	brne	.+4      	; 0x2be <__addsf3+0x1a>
 2ba:	1e f4       	brtc	.+6      	; 0x2c2 <__addsf3+0x1e>
 2bc:	ee c0       	rjmp	.+476    	; 0x49a <__fp_nan>
 2be:	0e f4       	brtc	.+2      	; 0x2c2 <__addsf3+0x1e>
 2c0:	e0 95       	com	r30
 2c2:	e7 fb       	bst	r30, 7
 2c4:	e4 c0       	rjmp	.+456    	; 0x48e <__fp_inf>

000002c6 <__addsf3x>:
 2c6:	e9 2f       	mov	r30, r25
 2c8:	0a d1       	rcall	.+532    	; 0x4de <__fp_split3>
 2ca:	80 f3       	brcs	.-32     	; 0x2ac <__addsf3+0x8>
 2cc:	ba 17       	cp	r27, r26
 2ce:	62 07       	cpc	r22, r18
 2d0:	73 07       	cpc	r23, r19
 2d2:	84 07       	cpc	r24, r20
 2d4:	95 07       	cpc	r25, r21
 2d6:	18 f0       	brcs	.+6      	; 0x2de <__addsf3x+0x18>
 2d8:	71 f4       	brne	.+28     	; 0x2f6 <__addsf3x+0x30>
 2da:	9e f5       	brtc	.+102    	; 0x342 <__addsf3x+0x7c>
 2dc:	22 c1       	rjmp	.+580    	; 0x522 <__fp_zero>
 2de:	0e f4       	brtc	.+2      	; 0x2e2 <__addsf3x+0x1c>
 2e0:	e0 95       	com	r30
 2e2:	0b 2e       	mov	r0, r27
 2e4:	ba 2f       	mov	r27, r26
 2e6:	a0 2d       	mov	r26, r0
 2e8:	0b 01       	movw	r0, r22
 2ea:	b9 01       	movw	r22, r18
 2ec:	90 01       	movw	r18, r0
 2ee:	0c 01       	movw	r0, r24
 2f0:	ca 01       	movw	r24, r20
 2f2:	a0 01       	movw	r20, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	ff 27       	eor	r31, r31
 2f8:	59 1b       	sub	r21, r25
 2fa:	99 f0       	breq	.+38     	; 0x322 <__addsf3x+0x5c>
 2fc:	59 3f       	cpi	r21, 0xF9	; 249
 2fe:	50 f4       	brcc	.+20     	; 0x314 <__addsf3x+0x4e>
 300:	50 3e       	cpi	r21, 0xE0	; 224
 302:	68 f1       	brcs	.+90     	; 0x35e <__addsf3x+0x98>
 304:	1a 16       	cp	r1, r26
 306:	f0 40       	sbci	r31, 0x00	; 0
 308:	a2 2f       	mov	r26, r18
 30a:	23 2f       	mov	r18, r19
 30c:	34 2f       	mov	r19, r20
 30e:	44 27       	eor	r20, r20
 310:	58 5f       	subi	r21, 0xF8	; 248
 312:	f3 cf       	rjmp	.-26     	; 0x2fa <__addsf3x+0x34>
 314:	46 95       	lsr	r20
 316:	37 95       	ror	r19
 318:	27 95       	ror	r18
 31a:	a7 95       	ror	r26
 31c:	f0 40       	sbci	r31, 0x00	; 0
 31e:	53 95       	inc	r21
 320:	c9 f7       	brne	.-14     	; 0x314 <__addsf3x+0x4e>
 322:	7e f4       	brtc	.+30     	; 0x342 <__addsf3x+0x7c>
 324:	1f 16       	cp	r1, r31
 326:	ba 0b       	sbc	r27, r26
 328:	62 0b       	sbc	r22, r18
 32a:	73 0b       	sbc	r23, r19
 32c:	84 0b       	sbc	r24, r20
 32e:	ba f0       	brmi	.+46     	; 0x35e <__addsf3x+0x98>
 330:	91 50       	subi	r25, 0x01	; 1
 332:	a1 f0       	breq	.+40     	; 0x35c <__addsf3x+0x96>
 334:	ff 0f       	add	r31, r31
 336:	bb 1f       	adc	r27, r27
 338:	66 1f       	adc	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	c2 f7       	brpl	.-16     	; 0x330 <__addsf3x+0x6a>
 340:	0e c0       	rjmp	.+28     	; 0x35e <__addsf3x+0x98>
 342:	ba 0f       	add	r27, r26
 344:	62 1f       	adc	r22, r18
 346:	73 1f       	adc	r23, r19
 348:	84 1f       	adc	r24, r20
 34a:	48 f4       	brcc	.+18     	; 0x35e <__addsf3x+0x98>
 34c:	87 95       	ror	r24
 34e:	77 95       	ror	r23
 350:	67 95       	ror	r22
 352:	b7 95       	ror	r27
 354:	f7 95       	ror	r31
 356:	9e 3f       	cpi	r25, 0xFE	; 254
 358:	08 f0       	brcs	.+2      	; 0x35c <__addsf3x+0x96>
 35a:	b3 cf       	rjmp	.-154    	; 0x2c2 <__addsf3+0x1e>
 35c:	93 95       	inc	r25
 35e:	88 0f       	add	r24, r24
 360:	08 f0       	brcs	.+2      	; 0x364 <__addsf3x+0x9e>
 362:	99 27       	eor	r25, r25
 364:	ee 0f       	add	r30, r30
 366:	97 95       	ror	r25
 368:	87 95       	ror	r24
 36a:	08 95       	ret

0000036c <__cmpsf2>:
 36c:	6c d0       	rcall	.+216    	; 0x446 <__fp_cmp>
 36e:	08 f4       	brcc	.+2      	; 0x372 <__cmpsf2+0x6>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	08 95       	ret

00000374 <__fixunssfsi>:
 374:	bc d0       	rcall	.+376    	; 0x4ee <__fp_splitA>
 376:	88 f0       	brcs	.+34     	; 0x39a <__fixunssfsi+0x26>
 378:	9f 57       	subi	r25, 0x7F	; 127
 37a:	90 f0       	brcs	.+36     	; 0x3a0 <__fixunssfsi+0x2c>
 37c:	b9 2f       	mov	r27, r25
 37e:	99 27       	eor	r25, r25
 380:	b7 51       	subi	r27, 0x17	; 23
 382:	a0 f0       	brcs	.+40     	; 0x3ac <__fixunssfsi+0x38>
 384:	d1 f0       	breq	.+52     	; 0x3ba <__fixunssfsi+0x46>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	88 1f       	adc	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	1a f0       	brmi	.+6      	; 0x396 <__fixunssfsi+0x22>
 390:	ba 95       	dec	r27
 392:	c9 f7       	brne	.-14     	; 0x386 <__fixunssfsi+0x12>
 394:	12 c0       	rjmp	.+36     	; 0x3ba <__fixunssfsi+0x46>
 396:	b1 30       	cpi	r27, 0x01	; 1
 398:	81 f0       	breq	.+32     	; 0x3ba <__fixunssfsi+0x46>
 39a:	c3 d0       	rcall	.+390    	; 0x522 <__fp_zero>
 39c:	b1 e0       	ldi	r27, 0x01	; 1
 39e:	08 95       	ret
 3a0:	c0 c0       	rjmp	.+384    	; 0x522 <__fp_zero>
 3a2:	67 2f       	mov	r22, r23
 3a4:	78 2f       	mov	r23, r24
 3a6:	88 27       	eor	r24, r24
 3a8:	b8 5f       	subi	r27, 0xF8	; 248
 3aa:	39 f0       	breq	.+14     	; 0x3ba <__fixunssfsi+0x46>
 3ac:	b9 3f       	cpi	r27, 0xF9	; 249
 3ae:	cc f3       	brlt	.-14     	; 0x3a2 <__fixunssfsi+0x2e>
 3b0:	86 95       	lsr	r24
 3b2:	77 95       	ror	r23
 3b4:	67 95       	ror	r22
 3b6:	b3 95       	inc	r27
 3b8:	d9 f7       	brne	.-10     	; 0x3b0 <__fixunssfsi+0x3c>
 3ba:	3e f4       	brtc	.+14     	; 0x3ca <__fixunssfsi+0x56>
 3bc:	90 95       	com	r25
 3be:	80 95       	com	r24
 3c0:	70 95       	com	r23
 3c2:	61 95       	neg	r22
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	8f 4f       	sbci	r24, 0xFF	; 255
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <__floatunsisf>:
 3cc:	e8 94       	clt
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <__floatsisf+0x12>

000003d0 <__floatsisf>:
 3d0:	97 fb       	bst	r25, 7
 3d2:	3e f4       	brtc	.+14     	; 0x3e2 <__floatsisf+0x12>
 3d4:	90 95       	com	r25
 3d6:	80 95       	com	r24
 3d8:	70 95       	com	r23
 3da:	61 95       	neg	r22
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	8f 4f       	sbci	r24, 0xFF	; 255
 3e0:	9f 4f       	sbci	r25, 0xFF	; 255
 3e2:	99 23       	and	r25, r25
 3e4:	a9 f0       	breq	.+42     	; 0x410 <__floatsisf+0x40>
 3e6:	f9 2f       	mov	r31, r25
 3e8:	96 e9       	ldi	r25, 0x96	; 150
 3ea:	bb 27       	eor	r27, r27
 3ec:	93 95       	inc	r25
 3ee:	f6 95       	lsr	r31
 3f0:	87 95       	ror	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b7 95       	ror	r27
 3f8:	f1 11       	cpse	r31, r1
 3fa:	f8 cf       	rjmp	.-16     	; 0x3ec <__floatsisf+0x1c>
 3fc:	fa f4       	brpl	.+62     	; 0x43c <__floatsisf+0x6c>
 3fe:	bb 0f       	add	r27, r27
 400:	11 f4       	brne	.+4      	; 0x406 <__floatsisf+0x36>
 402:	60 ff       	sbrs	r22, 0
 404:	1b c0       	rjmp	.+54     	; 0x43c <__floatsisf+0x6c>
 406:	6f 5f       	subi	r22, 0xFF	; 255
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	16 c0       	rjmp	.+44     	; 0x43c <__floatsisf+0x6c>
 410:	88 23       	and	r24, r24
 412:	11 f0       	breq	.+4      	; 0x418 <__floatsisf+0x48>
 414:	96 e9       	ldi	r25, 0x96	; 150
 416:	11 c0       	rjmp	.+34     	; 0x43a <__floatsisf+0x6a>
 418:	77 23       	and	r23, r23
 41a:	21 f0       	breq	.+8      	; 0x424 <__floatsisf+0x54>
 41c:	9e e8       	ldi	r25, 0x8E	; 142
 41e:	87 2f       	mov	r24, r23
 420:	76 2f       	mov	r23, r22
 422:	05 c0       	rjmp	.+10     	; 0x42e <__floatsisf+0x5e>
 424:	66 23       	and	r22, r22
 426:	71 f0       	breq	.+28     	; 0x444 <__floatsisf+0x74>
 428:	96 e8       	ldi	r25, 0x86	; 134
 42a:	86 2f       	mov	r24, r22
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	2a f0       	brmi	.+10     	; 0x43c <__floatsisf+0x6c>
 432:	9a 95       	dec	r25
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	da f7       	brpl	.-10     	; 0x432 <__floatsisf+0x62>
 43c:	88 0f       	add	r24, r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	97 f9       	bld	r25, 7
 444:	08 95       	ret

00000446 <__fp_cmp>:
 446:	99 0f       	add	r25, r25
 448:	00 08       	sbc	r0, r0
 44a:	55 0f       	add	r21, r21
 44c:	aa 0b       	sbc	r26, r26
 44e:	e0 e8       	ldi	r30, 0x80	; 128
 450:	fe ef       	ldi	r31, 0xFE	; 254
 452:	16 16       	cp	r1, r22
 454:	17 06       	cpc	r1, r23
 456:	e8 07       	cpc	r30, r24
 458:	f9 07       	cpc	r31, r25
 45a:	c0 f0       	brcs	.+48     	; 0x48c <__fp_cmp+0x46>
 45c:	12 16       	cp	r1, r18
 45e:	13 06       	cpc	r1, r19
 460:	e4 07       	cpc	r30, r20
 462:	f5 07       	cpc	r31, r21
 464:	98 f0       	brcs	.+38     	; 0x48c <__fp_cmp+0x46>
 466:	62 1b       	sub	r22, r18
 468:	73 0b       	sbc	r23, r19
 46a:	84 0b       	sbc	r24, r20
 46c:	95 0b       	sbc	r25, r21
 46e:	39 f4       	brne	.+14     	; 0x47e <__fp_cmp+0x38>
 470:	0a 26       	eor	r0, r26
 472:	61 f0       	breq	.+24     	; 0x48c <__fp_cmp+0x46>
 474:	23 2b       	or	r18, r19
 476:	24 2b       	or	r18, r20
 478:	25 2b       	or	r18, r21
 47a:	21 f4       	brne	.+8      	; 0x484 <__fp_cmp+0x3e>
 47c:	08 95       	ret
 47e:	0a 26       	eor	r0, r26
 480:	09 f4       	brne	.+2      	; 0x484 <__fp_cmp+0x3e>
 482:	a1 40       	sbci	r26, 0x01	; 1
 484:	a6 95       	lsr	r26
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	81 1d       	adc	r24, r1
 48a:	81 1d       	adc	r24, r1
 48c:	08 95       	ret

0000048e <__fp_inf>:
 48e:	97 f9       	bld	r25, 7
 490:	9f 67       	ori	r25, 0x7F	; 127
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	08 95       	ret

0000049a <__fp_nan>:
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	08 95       	ret

000004a0 <__fp_pscA>:
 4a0:	00 24       	eor	r0, r0
 4a2:	0a 94       	dec	r0
 4a4:	16 16       	cp	r1, r22
 4a6:	17 06       	cpc	r1, r23
 4a8:	18 06       	cpc	r1, r24
 4aa:	09 06       	cpc	r0, r25
 4ac:	08 95       	ret

000004ae <__fp_pscB>:
 4ae:	00 24       	eor	r0, r0
 4b0:	0a 94       	dec	r0
 4b2:	12 16       	cp	r1, r18
 4b4:	13 06       	cpc	r1, r19
 4b6:	14 06       	cpc	r1, r20
 4b8:	05 06       	cpc	r0, r21
 4ba:	08 95       	ret

000004bc <__fp_round>:
 4bc:	09 2e       	mov	r0, r25
 4be:	03 94       	inc	r0
 4c0:	00 0c       	add	r0, r0
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__fp_round+0xc>
 4c4:	88 23       	and	r24, r24
 4c6:	52 f0       	brmi	.+20     	; 0x4dc <__fp_round+0x20>
 4c8:	bb 0f       	add	r27, r27
 4ca:	40 f4       	brcc	.+16     	; 0x4dc <__fp_round+0x20>
 4cc:	bf 2b       	or	r27, r31
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__fp_round+0x18>
 4d0:	60 ff       	sbrs	r22, 0
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__fp_round+0x20>
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	08 95       	ret

000004de <__fp_split3>:
 4de:	57 fd       	sbrc	r21, 7
 4e0:	90 58       	subi	r25, 0x80	; 128
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	59 f0       	breq	.+22     	; 0x4fe <__fp_splitA+0x10>
 4e8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ea:	71 f0       	breq	.+28     	; 0x508 <__fp_splitA+0x1a>
 4ec:	47 95       	ror	r20

000004ee <__fp_splitA>:
 4ee:	88 0f       	add	r24, r24
 4f0:	97 fb       	bst	r25, 7
 4f2:	99 1f       	adc	r25, r25
 4f4:	61 f0       	breq	.+24     	; 0x50e <__fp_splitA+0x20>
 4f6:	9f 3f       	cpi	r25, 0xFF	; 255
 4f8:	79 f0       	breq	.+30     	; 0x518 <__fp_splitA+0x2a>
 4fa:	87 95       	ror	r24
 4fc:	08 95       	ret
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	14 06       	cpc	r1, r20
 504:	55 1f       	adc	r21, r21
 506:	f2 cf       	rjmp	.-28     	; 0x4ec <__fp_split3+0xe>
 508:	46 95       	lsr	r20
 50a:	f1 df       	rcall	.-30     	; 0x4ee <__fp_splitA>
 50c:	08 c0       	rjmp	.+16     	; 0x51e <__fp_splitA+0x30>
 50e:	16 16       	cp	r1, r22
 510:	17 06       	cpc	r1, r23
 512:	18 06       	cpc	r1, r24
 514:	99 1f       	adc	r25, r25
 516:	f1 cf       	rjmp	.-30     	; 0x4fa <__fp_splitA+0xc>
 518:	86 95       	lsr	r24
 51a:	71 05       	cpc	r23, r1
 51c:	61 05       	cpc	r22, r1
 51e:	08 94       	sec
 520:	08 95       	ret

00000522 <__fp_zero>:
 522:	e8 94       	clt

00000524 <__fp_szero>:
 524:	bb 27       	eor	r27, r27
 526:	66 27       	eor	r22, r22
 528:	77 27       	eor	r23, r23
 52a:	cb 01       	movw	r24, r22
 52c:	97 f9       	bld	r25, 7
 52e:	08 95       	ret

00000530 <__mulsf3>:
 530:	0a d0       	rcall	.+20     	; 0x546 <__mulsf3x>
 532:	c4 cf       	rjmp	.-120    	; 0x4bc <__fp_round>
 534:	b5 df       	rcall	.-150    	; 0x4a0 <__fp_pscA>
 536:	28 f0       	brcs	.+10     	; 0x542 <__mulsf3+0x12>
 538:	ba df       	rcall	.-140    	; 0x4ae <__fp_pscB>
 53a:	18 f0       	brcs	.+6      	; 0x542 <__mulsf3+0x12>
 53c:	95 23       	and	r25, r21
 53e:	09 f0       	breq	.+2      	; 0x542 <__mulsf3+0x12>
 540:	a6 cf       	rjmp	.-180    	; 0x48e <__fp_inf>
 542:	ab cf       	rjmp	.-170    	; 0x49a <__fp_nan>
 544:	ef cf       	rjmp	.-34     	; 0x524 <__fp_szero>

00000546 <__mulsf3x>:
 546:	cb df       	rcall	.-106    	; 0x4de <__fp_split3>
 548:	a8 f3       	brcs	.-22     	; 0x534 <__mulsf3+0x4>

0000054a <__mulsf3_pse>:
 54a:	99 23       	and	r25, r25
 54c:	d9 f3       	breq	.-10     	; 0x544 <__mulsf3+0x14>
 54e:	55 23       	and	r21, r21
 550:	c9 f3       	breq	.-14     	; 0x544 <__mulsf3+0x14>
 552:	95 0f       	add	r25, r21
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	55 1f       	adc	r21, r21
 558:	aa 27       	eor	r26, r26
 55a:	ee 27       	eor	r30, r30
 55c:	ff 27       	eor	r31, r31
 55e:	bb 27       	eor	r27, r27
 560:	00 24       	eor	r0, r0
 562:	08 94       	sec
 564:	67 95       	ror	r22
 566:	20 f4       	brcc	.+8      	; 0x570 <__mulsf3_pse+0x26>
 568:	e2 0f       	add	r30, r18
 56a:	f3 1f       	adc	r31, r19
 56c:	b4 1f       	adc	r27, r20
 56e:	0a 1e       	adc	r0, r26
 570:	22 0f       	add	r18, r18
 572:	33 1f       	adc	r19, r19
 574:	44 1f       	adc	r20, r20
 576:	aa 1f       	adc	r26, r26
 578:	66 95       	lsr	r22
 57a:	a9 f7       	brne	.-22     	; 0x566 <__mulsf3_pse+0x1c>
 57c:	77 95       	ror	r23
 57e:	30 f4       	brcc	.+12     	; 0x58c <__mulsf3_pse+0x42>
 580:	f3 0f       	add	r31, r19
 582:	b4 1f       	adc	r27, r20
 584:	0a 1e       	adc	r0, r26
 586:	12 1e       	adc	r1, r18
 588:	08 f4       	brcc	.+2      	; 0x58c <__mulsf3_pse+0x42>
 58a:	63 95       	inc	r22
 58c:	33 0f       	add	r19, r19
 58e:	44 1f       	adc	r20, r20
 590:	aa 1f       	adc	r26, r26
 592:	22 1f       	adc	r18, r18
 594:	76 95       	lsr	r23
 596:	99 f7       	brne	.-26     	; 0x57e <__mulsf3_pse+0x34>
 598:	87 95       	ror	r24
 59a:	20 f4       	brcc	.+8      	; 0x5a4 <__mulsf3_pse+0x5a>
 59c:	b4 0f       	add	r27, r20
 59e:	0a 1e       	adc	r0, r26
 5a0:	12 1e       	adc	r1, r18
 5a2:	63 1f       	adc	r22, r19
 5a4:	44 0f       	add	r20, r20
 5a6:	aa 1f       	adc	r26, r26
 5a8:	22 1f       	adc	r18, r18
 5aa:	33 1f       	adc	r19, r19
 5ac:	86 95       	lsr	r24
 5ae:	a9 f7       	brne	.-22     	; 0x59a <__mulsf3_pse+0x50>
 5b0:	86 2f       	mov	r24, r22
 5b2:	71 2d       	mov	r23, r1
 5b4:	60 2d       	mov	r22, r0
 5b6:	11 24       	eor	r1, r1
 5b8:	9f 57       	subi	r25, 0x7F	; 127
 5ba:	50 40       	sbci	r21, 0x00	; 0
 5bc:	8a f0       	brmi	.+34     	; 0x5e0 <__mulsf3_pse+0x96>
 5be:	e1 f0       	breq	.+56     	; 0x5f8 <__mulsf3_pse+0xae>
 5c0:	88 23       	and	r24, r24
 5c2:	4a f0       	brmi	.+18     	; 0x5d6 <__mulsf3_pse+0x8c>
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	bb 1f       	adc	r27, r27
 5ca:	66 1f       	adc	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	91 50       	subi	r25, 0x01	; 1
 5d2:	50 40       	sbci	r21, 0x00	; 0
 5d4:	a9 f7       	brne	.-22     	; 0x5c0 <__mulsf3_pse+0x76>
 5d6:	9e 3f       	cpi	r25, 0xFE	; 254
 5d8:	51 05       	cpc	r21, r1
 5da:	70 f0       	brcs	.+28     	; 0x5f8 <__mulsf3_pse+0xae>
 5dc:	58 cf       	rjmp	.-336    	; 0x48e <__fp_inf>
 5de:	a2 cf       	rjmp	.-188    	; 0x524 <__fp_szero>
 5e0:	5f 3f       	cpi	r21, 0xFF	; 255
 5e2:	ec f3       	brlt	.-6      	; 0x5de <__mulsf3_pse+0x94>
 5e4:	98 3e       	cpi	r25, 0xE8	; 232
 5e6:	dc f3       	brlt	.-10     	; 0x5de <__mulsf3_pse+0x94>
 5e8:	86 95       	lsr	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b7 95       	ror	r27
 5f0:	f7 95       	ror	r31
 5f2:	e7 95       	ror	r30
 5f4:	9f 5f       	subi	r25, 0xFF	; 255
 5f6:	c1 f7       	brne	.-16     	; 0x5e8 <__mulsf3_pse+0x9e>
 5f8:	fe 2b       	or	r31, r30
 5fa:	88 0f       	add	r24, r24
 5fc:	91 1d       	adc	r25, r1
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__udivmodqi4>:
 606:	99 1b       	sub	r25, r25
 608:	79 e0       	ldi	r23, 0x09	; 9
 60a:	04 c0       	rjmp	.+8      	; 0x614 <__udivmodqi4_ep>

0000060c <__udivmodqi4_loop>:
 60c:	99 1f       	adc	r25, r25
 60e:	96 17       	cp	r25, r22
 610:	08 f0       	brcs	.+2      	; 0x614 <__udivmodqi4_ep>
 612:	96 1b       	sub	r25, r22

00000614 <__udivmodqi4_ep>:
 614:	88 1f       	adc	r24, r24
 616:	7a 95       	dec	r23
 618:	c9 f7       	brne	.-14     	; 0x60c <__udivmodqi4_loop>
 61a:	80 95       	com	r24
 61c:	08 95       	ret

0000061e <_exit>:
 61e:	f8 94       	cli

00000620 <__stop_program>:
 620:	ff cf       	rjmp	.-2      	; 0x620 <__stop_program>
